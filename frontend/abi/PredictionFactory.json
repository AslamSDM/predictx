{
  "address": "0xfa107CEa834E0C59d2CB1CBdac3b1B9d962DB524",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "predictionId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "predictionAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "targetPrice",
          "type": "uint256"
        }
      ],
      "name": "PredictionCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_pairName",
          "type": "string"
        },
        {
          "internalType": "enum PredictionMarket.Direction",
          "name": "_direction",
          "type": "uint8"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "base",
              "type": "uint256"
            },
            {
              "internalType": "int32",
              "name": "expo",
              "type": "int32"
            }
          ],
          "internalType": "struct PredictionMarket.Price",
          "name": "_targetPrice",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "_endTime",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_metadataURI",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_initialLiquidity",
          "type": "uint256"
        }
      ],
      "name": "createPrediction",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_predictionId",
          "type": "uint256"
        }
      ],
      "name": "getPredictionOutcome",
      "outputs": [
        {
          "internalType": "enum PredictionMarket.Outcome",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUserPredictions",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "predictionCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "predictions",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userPredictions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "withdrawProtocolFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2da0b060f9d4e545aa9258305ebd5e9a4be10967405d93b80706bfc91beb4757",
  "receipt": {
    "to": null,
    "from": "0xce957920B00eD410be479C8961506205F26600Bf",
    "contractAddress": "0xfa107CEa834E0C59d2CB1CBdac3b1B9d962DB524",
    "transactionIndex": 61,
    "gasUsed": "4909333",
    "logsBloom": "0x
    "blockHash": "0xbc1164180c8a9d17d6a4868d24b0c99d8a0f8462cc428ed95a1313bf81ce2a87",
    "transactionHash": "0x2da0b060f9d4e545aa9258305ebd5e9a4be10967405d93b80706bfc91beb4757",
    "logs": [
      {
        "transactionIndex": 61,
        "blockNumber": 9452519,
        "transactionHash": "0x2da0b060f9d4e545aa9258305ebd5e9a4be10967405d93b80706bfc91beb4757",
        "address": "0xfa107CEa834E0C59d2CB1CBdac3b1B9d962DB524",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ce957920b00ed410be479c8961506205f26600bf"
        ],
        "data": "0x",
        "logIndex": 92,
        "blockHash": "0xbc1164180c8a9d17d6a4868d24b0c99d8a0f8462cc428ed95a1313bf81ce2a87"
      }
    ],
    "blockNumber": 9452519,
    "cumulativeGasUsed": "12372033",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 26,
  "solcInputHash": "e16da11f77c2517306fac0bf91489f1c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"predictionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"predictionAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"targetPrice\",\"type\":\"uint256\"}],\"name\":\"PredictionCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_pairName\",\"type\":\"string\"},{\"internalType\":\"enum PredictionMarket.Direction\",\"name\":\"_direction\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"base\",\"type\":\"uint256\"},{\"internalType\":\"int32\",\"name\":\"expo\",\"type\":\"int32\"}],\"internalType\":\"struct PredictionMarket.Price\",\"name\":\"_targetPrice\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_metadataURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_initialLiquidity\",\"type\":\"uint256\"}],\"name\":\"createPrediction\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_predictionId\",\"type\":\"uint256\"}],\"name\":\"getPredictionOutcome\",\"outputs\":[{\"internalType\":\"enum PredictionMarket.Outcome\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserPredictions\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"predictionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"predictions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userPredictions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdrawProtocolFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"PredictX\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdrawProtocolFees(address)\":{\"params\":{\"token\":\"Address of ERC20 token to withdraw, or address(0) for ETH\"}}},\"title\":\"PredictionFactory - Deployment hub and registry for prediction markets\",\"version\":1},\"userdoc\":{\"events\":{\"PredictionCreated(uint256,address,address,uint256,uint256)\":{\"notice\":\"Event emitted when a new prediction is created\"}},\"kind\":\"user\",\"methods\":{\"getPredictionOutcome(uint256)\":{\"notice\":\"Returns outcome of a specific prediction\"},\"getUserPredictions(address)\":{\"notice\":\"Returns list of prediction ids created by user\"},\"predictionCount()\":{\"notice\":\"Total number of created predictions (and latest id)\"},\"predictions(uint256)\":{\"notice\":\"Registry mapping from id to prediction address\"},\"userPredictions(address,uint256)\":{\"notice\":\"Tracks predictions created by a user\"},\"withdrawProtocolFees(address)\":{\"notice\":\"Withdraw accumulated protocol fees (ERC20 or ETH) to the owner\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PredictionFactory.sol\":\"PredictionFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"@pythnetwork/pyth-sdk-solidity/IPyth.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"./PythStructs.sol\\\";\\nimport \\\"./IPythEvents.sol\\\";\\n\\n/// @title Consume prices from the Pyth Network (https://pyth.network/).\\n/// @dev Please refer to the guidance at https://docs.pyth.network/documentation/pythnet-price-feeds/best-practices for how to consume prices safely.\\n/// @author Pyth Data Association\\ninterface IPyth is IPythEvents {\\n    /// @notice Returns the price of a price feed without any sanity checks.\\n    /// @dev This function returns the most recent price update in this contract without any recency checks.\\n    /// This function is unsafe as the returned price update may be arbitrarily far in the past.\\n    ///\\n    /// Users of this function should check the `publishTime` in the price to ensure that the returned price is\\n    /// sufficiently recent for their application. If you are considering using this function, it may be\\n    /// safer / easier to use `getPriceNoOlderThan`.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getPriceUnsafe(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the price that is no older than `age` seconds of the current time.\\n    /// @dev This function is a sanity-checked version of `getPriceUnsafe` which is useful in\\n    /// applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently\\n    /// recently.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getPriceNoOlderThan(\\n        bytes32 id,\\n        uint age\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the exponentially-weighted moving average price of a price feed without any sanity checks.\\n    /// @dev This function returns the same price as `getEmaPrice` in the case where the price is available.\\n    /// However, if the price is not recent this function returns the latest available price.\\n    ///\\n    /// The returned price can be from arbitrarily far in the past; this function makes no guarantees that\\n    /// the returned price is recent or useful for any particular application.\\n    ///\\n    /// Users of this function should check the `publishTime` in the price to ensure that the returned price is\\n    /// sufficiently recent for their application. If you are considering using this function, it may be\\n    /// safer / easier to use either `getEmaPrice` or `getEmaPriceNoOlderThan`.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getEmaPriceUnsafe(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the exponentially-weighted moving average price that is no older than `age` seconds\\n    /// of the current time.\\n    /// @dev This function is a sanity-checked version of `getEmaPriceUnsafe` which is useful in\\n    /// applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently\\n    /// recently.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getEmaPriceNoOlderThan(\\n        bytes32 id,\\n        uint age\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Update price feeds with given update messages.\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    /// Prices will be updated if they are more recent than the current stored prices.\\n    /// The call will succeed even if the update is not the most recent.\\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid.\\n    /// @param updateData Array of price update data.\\n    function updatePriceFeeds(bytes[] calldata updateData) external payable;\\n\\n    /// @notice Wrapper around updatePriceFeeds that rejects fast if a price update is not necessary. A price update is\\n    /// necessary if the current on-chain publishTime is older than the given publishTime. It relies solely on the\\n    /// given `publishTimes` for the price feeds and does not read the actual price update publish time within `updateData`.\\n    ///\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    ///\\n    /// `priceIds` and `publishTimes` are two arrays with the same size that correspond to senders known publishTime\\n    /// of each priceId when calling this method. If all of price feeds within `priceIds` have updated and have\\n    /// a newer or equal publish time than the given publish time, it will reject the transaction to save gas.\\n    /// Otherwise, it calls updatePriceFeeds method to update the prices.\\n    ///\\n    /// @dev Reverts if update is not needed or the transferred fee is not sufficient or the updateData is invalid.\\n    /// @param updateData Array of price update data.\\n    /// @param priceIds Array of price ids.\\n    /// @param publishTimes Array of publishTimes. `publishTimes[i]` corresponds to known `publishTime` of `priceIds[i]`\\n    function updatePriceFeedsIfNecessary(\\n        bytes[] calldata updateData,\\n        bytes32[] calldata priceIds,\\n        uint64[] calldata publishTimes\\n    ) external payable;\\n\\n    /// @notice Returns the required fee to update an array of price updates.\\n    /// @param updateData Array of price update data.\\n    /// @return feeAmount The required fee in Wei.\\n    function getUpdateFee(\\n        bytes[] calldata updateData\\n    ) external view returns (uint feeAmount);\\n\\n    /// @notice Returns the required fee to update a TWAP price.\\n    /// @param updateData Array of price update data.\\n    /// @return feeAmount The required fee in Wei.\\n    function getTwapUpdateFee(\\n        bytes[] calldata updateData\\n    ) external view returns (uint feeAmount);\\n\\n    /// @notice Parse `updateData` and return price feeds of the given `priceIds` if they are all published\\n    /// within `minPublishTime` and `maxPublishTime`.\\n    ///\\n    /// You can use this method if you want to use a Pyth price at a fixed time and not the most recent price;\\n    /// otherwise, please consider using `updatePriceFeeds`. This method may store the price updates on-chain, if they\\n    /// are more recent than the current stored prices.\\n    ///\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    ///\\n    ///\\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid or there is\\n    /// no update for any of the given `priceIds` within the given time range.\\n    /// @param updateData Array of price update data.\\n    /// @param priceIds Array of price ids.\\n    /// @param minPublishTime minimum acceptable publishTime for the given `priceIds`.\\n    /// @param maxPublishTime maximum acceptable publishTime for the given `priceIds`.\\n    /// @return priceFeeds Array of the price feeds corresponding to the given `priceIds` (with the same order).\\n    function parsePriceFeedUpdates(\\n        bytes[] calldata updateData,\\n        bytes32[] calldata priceIds,\\n        uint64 minPublishTime,\\n        uint64 maxPublishTime\\n    ) external payable returns (PythStructs.PriceFeed[] memory priceFeeds);\\n\\n    /// @notice Parse `updateData` and return price feeds of the given `priceIds` if they are all published\\n    /// within `minPublishTime` and `maxPublishTime,` but choose to store price updates if `storeUpdatesIfFresh`.\\n    ///\\n    /// You can use this method if you want to use a Pyth price at a fixed time and not the most recent price;\\n    /// otherwise, please consider using `updatePriceFeeds`. This method may store the price updates on-chain, if they\\n    /// are more recent than the current stored prices.\\n    ///\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    ///\\n    /// This method will eventually allow the caller to determine whether parsed price feeds should update\\n    /// the stored values as well.\\n    ///\\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid or there is\\n    /// no update for any of the given `priceIds` within the given time range.\\n    /// @param updateData Array of price update data.\\n    /// @param priceIds Array of price ids.\\n    /// @param minAllowedPublishTime minimum acceptable publishTime for the given `priceIds`.\\n    /// @param maxAllowedPublishTime maximum acceptable publishTime for the given `priceIds`.\\n    /// @param storeUpdatesIfFresh flag for the parse function to\\n    /// @return priceFeeds Array of the price feeds corresponding to the given `priceIds` (with the same order).\\n    function parsePriceFeedUpdatesWithConfig(\\n        bytes[] calldata updateData,\\n        bytes32[] calldata priceIds,\\n        uint64 minAllowedPublishTime,\\n        uint64 maxAllowedPublishTime,\\n        bool checkUniqueness,\\n        bool checkUpdateDataIsMinimal,\\n        bool storeUpdatesIfFresh\\n    )\\n        external\\n        payable\\n        returns (\\n            PythStructs.PriceFeed[] memory priceFeeds,\\n            uint64[] memory slots\\n        );\\n\\n    /// @notice Parse time-weighted average price (TWAP) from two consecutive price updates for the given `priceIds`.\\n    ///\\n    /// This method calculates TWAP between two data points by processing the difference in cumulative price values\\n    /// divided by the time period. It requires exactly two updates that contain valid price information\\n    /// for all the requested price IDs.\\n    ///\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the updateData array.\\n    ///\\n    /// @dev Reverts if:\\n    /// - The transferred fee is not sufficient\\n    /// - The updateData is invalid or malformed\\n    /// - The updateData array does not contain exactly 2 updates\\n    /// - There is no update for any of the given `priceIds`\\n    /// - The time ordering between data points is invalid (start time must be before end time)\\n    /// @param updateData Array containing exactly two price updates (start and end points for TWAP calculation)\\n    /// @param priceIds Array of price ids to calculate TWAP for\\n    /// @return twapPriceFeeds Array of TWAP price feeds corresponding to the given `priceIds` (with the same order)\\n    function parseTwapPriceFeedUpdates(\\n        bytes[] calldata updateData,\\n        bytes32[] calldata priceIds\\n    )\\n        external\\n        payable\\n        returns (PythStructs.TwapPriceFeed[] memory twapPriceFeeds);\\n\\n    /// @notice Similar to `parsePriceFeedUpdates` but ensures the updates returned are\\n    /// the first updates published in minPublishTime. That is, if there are multiple updates for a given timestamp,\\n    /// this method will return the first update. This method may store the price updates on-chain, if they\\n    /// are more recent than the current stored prices.\\n    ///\\n    ///\\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid or there is\\n    /// no update for any of the given `priceIds` within the given time range and uniqueness condition.\\n    /// @param updateData Array of price update data.\\n    /// @param priceIds Array of price ids.\\n    /// @param minPublishTime minimum acceptable publishTime for the given `priceIds`.\\n    /// @param maxPublishTime maximum acceptable publishTime for the given `priceIds`.\\n    /// @return priceFeeds Array of the price feeds corresponding to the given `priceIds` (with the same order).\\n    function parsePriceFeedUpdatesUnique(\\n        bytes[] calldata updateData,\\n        bytes32[] calldata priceIds,\\n        uint64 minPublishTime,\\n        uint64 maxPublishTime\\n    ) external payable returns (PythStructs.PriceFeed[] memory priceFeeds);\\n}\\n\",\"keccak256\":\"0xada6a1f4898b056d2804409ecad466b786dc6a12bc6f8f247e7f1471c1b86fcd\",\"license\":\"Apache-2.0\"},\"@pythnetwork/pyth-sdk-solidity/IPythEvents.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @title IPythEvents contains the events that Pyth contract emits.\\n/// @dev This interface can be used for listening to the updates for off-chain and testing purposes.\\ninterface IPythEvents {\\n    /// @dev Emitted when the price feed with `id` has received a fresh update.\\n    /// @param id The Pyth Price Feed ID.\\n    /// @param publishTime Publish time of the given price update.\\n    /// @param price Price of the given price update.\\n    /// @param conf Confidence interval of the given price update.\\n    event PriceFeedUpdate(\\n        bytes32 indexed id,\\n        uint64 publishTime,\\n        int64 price,\\n        uint64 conf\\n    );\\n\\n    /// @dev Emitted when the TWAP price feed with `id` has received a fresh update.\\n    /// @param id The Pyth Price Feed ID.\\n    /// @param startTime Start time of the TWAP.\\n    /// @param endTime End time of the TWAP.\\n    /// @param twapPrice Price of the TWAP.\\n    /// @param twapConf Confidence interval of the TWAP.\\n    /// @param downSlotsRatio Down slot ratio of the TWAP.\\n    event TwapPriceFeedUpdate(\\n        bytes32 indexed id,\\n        uint64 startTime,\\n        uint64 endTime,\\n        int64 twapPrice,\\n        uint64 twapConf,\\n        uint32 downSlotsRatio\\n    );\\n}\\n\",\"keccak256\":\"0xd67239becd2c39bd9d065830be24e70606f5747ab31b8818bea849d09ac17ddc\",\"license\":\"Apache-2.0\"},\"@pythnetwork/pyth-sdk-solidity/PythStructs.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\ncontract PythStructs {\\n    // A price with a degree of uncertainty, represented as a price +- a confidence interval.\\n    //\\n    // The confidence interval roughly corresponds to the standard error of a normal distribution.\\n    // Both the price and confidence are stored in a fixed-point numeric representation,\\n    // `x * (10^expo)`, where `expo` is the exponent.\\n    //\\n    // Please refer to the documentation at https://docs.pyth.network/documentation/pythnet-price-feeds/best-practices for how\\n    // to how this price safely.\\n    struct Price {\\n        // Price\\n        int64 price;\\n        // Confidence interval around the price\\n        uint64 conf;\\n        // Price exponent\\n        int32 expo;\\n        // Unix timestamp describing when the price was published\\n        uint publishTime;\\n    }\\n\\n    // PriceFeed represents a current aggregate price from pyth publisher feeds.\\n    struct PriceFeed {\\n        // The price ID.\\n        bytes32 id;\\n        // Latest available price\\n        Price price;\\n        // Latest available exponentially-weighted moving average price\\n        Price emaPrice;\\n    }\\n\\n    struct TwapPriceFeed {\\n        // The price ID.\\n        bytes32 id;\\n        // Start time of the TWAP\\n        uint64 startTime;\\n        // End time of the TWAP\\n        uint64 endTime;\\n        // TWAP price\\n        Price twap;\\n        // Down slot ratio represents the ratio of price feed updates that were missed or unavailable\\n        // during the TWAP period, expressed as a fixed-point number between 0 and 1e6 (100%).\\n        // For example:\\n        //   - 0 means all price updates were available\\n        //   - 500_000 means 50% of updates were missed\\n        //   - 1_000_000 means all updates were missed\\n        // This can be used to assess the quality/reliability of the TWAP calculation.\\n        // Applications should define a maximum acceptable ratio (e.g. 100000 for 10%)\\n        // and revert if downSlotsRatio exceeds it.\\n        uint32 downSlotsRatio;\\n    }\\n\\n    // Information used to calculate time-weighted average prices (TWAP)\\n    struct TwapPriceInfo {\\n        // slot 1\\n        int128 cumulativePrice;\\n        uint128 cumulativeConf;\\n        // slot 2\\n        uint64 numDownSlots;\\n        uint64 publishSlot;\\n        uint64 publishTime;\\n        uint64 prevPublishTime;\\n        // slot 3\\n        int32 expo;\\n    }\\n}\\n\",\"keccak256\":\"0x474436bf0d558cc9b2c00a9d0ce318147acdf7963f34ef4acadb9248e65bbc7b\",\"license\":\"Apache-2.0\"},\"contracts/PredictionFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IPredictionFactory } from \\\"./interfaces/IPredictionFactory.sol\\\";\\nimport \\\"@pythnetwork/pyth-sdk-solidity/IPyth.sol\\\";\\nimport \\\"@pythnetwork/pyth-sdk-solidity/PythStructs.sol\\\";\\nimport { PredictionMarket } from \\\"./PredictionMarket.sol\\\";\\n\\n/// @title PredictionFactory - Deployment hub and registry for prediction markets\\n/// @author PredictX\\ncontract PredictionFactory is IPredictionFactory, Ownable, ReentrancyGuard {\\n    /// @notice Address of the Pyth contract used by predictions\\n    \\n    /// @notice Decimals for PYUSD token (6 decimals)\\n    uint256 private constant PYUSD_DECIMALS = 6;\\n\\n    /// @notice Protocol fee percentage applied to losing pool for new predictions\\n\\n    /// @notice Total number of created predictions (and latest id)\\n    uint256 public predictionCount;\\n\\n    /// @notice Registry mapping from id to prediction address\\n    mapping(uint256 => address) public predictions;\\n\\n    /// @notice Tracks predictions created by a user\\n    mapping(address => uint256[]) public userPredictions;\\n\\n    constructor() Ownable(msg.sender) {}\\n\\n\\n    // owner() inherited from Ownable\\n\\n    /// @notice Resolve Pyth feed id from an uppercased pair name like \\\"ETHUSD\\\"\\n    function _resolvePythFeedId(string memory pair) internal pure returns (bytes32) {\\n        bytes32 key = keccak256(abi.encodePacked(pair));\\n        if (key == keccak256(abi.encodePacked(\\\"1INCHUSD\\\"))) return 0x63f341689d98a12ef60a5cff1d7f85c70a9e17bf1575f0e7c0b2512d48b1c8b3;\\n        if (key == keccak256(abi.encodePacked(\\\"AAVEUSD\\\"))) return 0x2b9ab1e972a281585084148ba1389800799bd4be63b957507db1349314e47445;\\n        if (key == keccak256(abi.encodePacked(\\\"BITCOINUSD\\\"))) return 0xc5e0e0c92116c0c070a242b254270441a6201af680a33e0381561c59db3266c9;\\n        if (key == keccak256(abi.encodePacked(\\\"BNBUSD\\\"))) return 0x2f95862b045670cd22bee3114c39763a4a08beeb663b145d283c31d7d1101c4f;\\n        if (key == keccak256(abi.encodePacked(\\\"ETHUSD\\\"))) return 0xff61491a931112ddf1bd8147cd1b641375f79f5825126d665480874634fd0ace;\\n        revert(\\\"Unsupported pair\\\");\\n    }\\n\\n    function createPrediction(\\n        string memory _pairName,\\n        PredictionMarket.Direction _direction,\\n        PredictionMarket.Price memory _targetPrice,\\n        uint256 _endTime,\\n        string memory _metadataURI,\\n        uint256 _initialLiquidity\\n    ) external override returns (address) {\\n        require(_endTime > block.timestamp, \\\"End must be future\\\");\\n        require(!(_endTime - block.timestamp > 2 days), \\\"End must be less than 2 days from now\\\");\\n        require(_initialLiquidity > 0, \\\"Initial liquidity must be greater than 0\\\");\\n        // Initial probability is hardcoded to 50% (50)\\n        \\n        bytes32 feedId = _resolvePythFeedId(_pairName);\\n\\n        PredictionMarket newPrediction = new PredictionMarket(\\n            msg.sender,\\n            address(this),\\n            _pairName,\\n            _direction,\\n            feedId,\\n            _targetPrice,\\n            _endTime,\\n            _metadataURI,\\n            _initialLiquidity\\n        );\\n\\n        predictionCount += 1;\\n        predictions[predictionCount] = address(newPrediction);\\n        userPredictions[msg.sender].push(predictionCount);\\n\\n        emit PredictionCreated(predictionCount, msg.sender, address(newPrediction), _endTime, _targetPrice.base);\\n        return address(newPrediction);\\n    }\\n\\n    /// @notice Withdraw accumulated protocol fees (ERC20 or ETH) to the owner\\n    /// @param token Address of ERC20 token to withdraw, or address(0) for ETH\\n    function withdrawProtocolFees(address token) external override onlyOwner nonReentrant {\\n        if (token == address(0)) {\\n            uint256 ethBal = address(this).balance;\\n            require(ethBal > 0, \\\"No ETH fees\\\");\\n            (bool success, ) = payable(owner()).call{ value: ethBal }(\\\"\\\");\\n            require(success, \\\"ETH withdraw failed\\\");\\n        } else {\\n            uint256 bal = IERC20(token).balanceOf(address(this));\\n            require(bal > 0, \\\"No token fees\\\");\\n            require(IERC20(token).transfer(owner(), bal), \\\"Token withdraw failed\\\");\\n        }\\n    }\\n\\n    /// @notice Returns list of prediction ids created by user\\n    function getUserPredictions(address _user) external view override returns (uint256[] memory) {\\n        return userPredictions[_user];\\n    }\\n\\n    /// @notice Returns outcome of a specific prediction\\n    function getPredictionOutcome(uint256 _predictionId) external view override returns (PredictionMarket.Outcome) {\\n        address predAddr = predictions[_predictionId];\\n        require(predAddr != address(0), \\\"Invalid id\\\");\\n        return PredictionMarket(predAddr).outcome();\\n    }\\n\\n}\\n\\n\\n\\n\",\"keccak256\":\"0x413a4cab869f5659ac64bf29958af191bd516d4493e8d1ae043f5e9b596b9e54\",\"license\":\"MIT\"},\"contracts/PredictionMarket.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport { PredictionMarketToken } from \\\"./PredictionMarketToken.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport { IPredictionFactory } from \\\"./interfaces/IPredictionFactory.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@pythnetwork/pyth-sdk-solidity/IPyth.sol\\\";\\nimport \\\"@pythnetwork/pyth-sdk-solidity/PythStructs.sol\\\";\\ncontract PredictionMarket is Ownable, ReentrancyGuard {\\n    /////////////////\\n    /// Errors //////\\n    /////////////////\\n\\n    error PredictionMarket__PredictionAlreadyReported();\\n    error PredictionMarket__OwnerCannotCall();\\n    error PredictionMarket__PredictionNotReported();\\n    error PredictionMarket__InsufficientWinningTokens();\\n    error PredictionMarket__AmountMustBeGreaterThanZero();\\n    error PredictionMarket__InsufficientTokenReserve(Outcome _outcome, uint256 _amountToken);\\n    error PredictionMarket__TokenTransferFailed();\\n    error PredictionMarket__InsufficientBalance(uint256 _tradingAmount, uint256 _userBalance);\\n    error PredictionMarket__InsufficientAllowance(uint256 _tradingAmount, uint256 _allowance);\\n    error PredictionMarket__InsufficientLiquidity();\\n    error PredictionMarket__MarketNotInitialized();\\n    error PredictionMarket__MarketAlreadyInitialized();\\n    error PredictionMarket__MarketNotEnded();\\n\\n    enum Outcome {\\n        YES,\\n        NO,\\n        Undetermined\\n    }\\n    enum Direction { Up, Down }\\n    enum Status {\\n        NOT_INITIALIZED,\\n        ONE_TOKEN_MINTED,\\n        TWO_TOKEN_MINTED,\\n        MARKET_INITIALIZED,\\n         HIGHPRICE_RESOLVED,\\n         LOWPRICE_RESOLVED, \\n         PRICE_UPDATED\\n          }\\n\\n\\n    uint256 private constant PRECISION = 1e6;\\n    uint256 private constant PYUSD_DECIMALS = 6;\\n    \\n    uint256 public initialTokenValue = 10000;\\n    uint8 public initialYesProbability = 50;\\n    uint8 public percentageToLock = 10;\\n    uint256 public pyUSD;\\n    uint256 public lpTradingRevenue;\\n    PredictionMarketToken public yesToken;\\n    PredictionMarketToken public noToken;\\n\\n    struct Price {\\n        uint256 base;\\n        int32 expo;\\n    }\\n \\n    bool public isReported=false;\\n    PredictionMarketToken public winningToken;\\n\\n    Status public status;\\n    Outcome public outcome;\\n    uint256 public startTime;\\n    uint256 public endTime;\\n    string public metadataURI;\\n    address public immutable stakeToken = 0xCaC524BcA292aaade2DF8A05cC58F0a65B1B3bB9; //PYUSD\\n    address public immutable pythContractAddress = 0xDd24F84d36BF92C65F92307595335bdFab5Bbd21;\\n    Direction public direction;\\n    bytes32 public pythPriceFeedId;\\n    Price public targetPrice;\\n    string public pairName;\\n    address public factory;\\n    address public creator;\\n\\n    PythStructs.PriceFeed public highPriceFeed;\\n    PythStructs.PriceFeed public lowPriceFeed;\\n    PythStructs.Price public updatePriceFeed;\\n\\n    event TokensPurchased(address indexed buyer, Outcome outcome, uint256 amount, uint256 ethAmount);\\n    event TokensSold(address indexed seller, Outcome outcome, uint256 amount, uint256 ethAmount);\\n    event WinningTokensRedeemed(address indexed redeemer, uint256 amount, uint256 ethAmount);\\n    event MarketReported(address indexed resolver, Outcome winningOutcome, address winningToken);\\n    event CurrentPairTokenPrice(uint256  price);\\n    event MarketResolved(address indexed resolver, uint256 totalEthToSend);\\n    event LiquidityAdded(address indexed provider, uint256 ethAmount, uint256 tokensAmount);\\n    event LiquidityRemoved(address indexed provider, uint256 ethAmount, uint256 tokensAmount);\\n\\n\\n\\n    modifier predictionNotReported() {\\n        if (isReported) {\\n            revert PredictionMarket__PredictionAlreadyReported();\\n        }\\n        _;\\n    }\\n\\n\\n    modifier predictionReported() {\\n        if (!isReported) {\\n            revert PredictionMarket__PredictionNotReported();\\n        }\\n        _;\\n    }\\n\\n  \\n    modifier notOwner() {\\n        if (msg.sender == owner()) {\\n            revert PredictionMarket__OwnerCannotCall();\\n        }\\n        _;\\n    }\\n    \\n    modifier amountGreaterThanZero(uint256 _amount) {\\n        if (_amount == 0) {\\n            revert PredictionMarket__AmountMustBeGreaterThanZero();\\n        }\\n        _;\\n    }\\n\\n    modifier marketInitialized() {\\n        if (status != Status.MARKET_INITIALIZED) {\\n            revert PredictionMarket__MarketNotInitialized();\\n        }\\n        _;\\n    }\\n\\n\\n\\n    constructor(\\n        address _creator,\\n        address _factory,\\n        string memory _pairName,\\n        Direction _direction,\\n        bytes32 _pythPriceFeedId,\\n        Price memory _targetPrice,\\n        uint256 _endTime,\\n        string memory _metadataURI,\\n        uint256 _initialLiquidity\\n    ) Ownable(_creator) {\\n\\n        pythPriceFeedId = _pythPriceFeedId;\\n        targetPrice = _targetPrice;\\n        endTime = _endTime;\\n        metadataURI = _metadataURI;\\n        startTime = block.timestamp;\\n        direction = _direction; //Up or Down\\n        pairName = _pairName;\\n        status = Status.NOT_INITIALIZED;\\n        outcome = Outcome.Undetermined;\\n        creator = _creator;\\n        factory = _factory;\\n\\n        pyUSD = _initialLiquidity;\\n       \\n    }\\n    function initializeNoToken() external onlyOwner {\\nif (status != Status.NOT_INITIALIZED && status != Status.ONE_TOKEN_MINTED) {\\n    revert PredictionMarket__MarketAlreadyInitialized();\\n}\\n        uint256 initialTokenAmount = (pyUSD/initialTokenValue)*PRECISION;\\n        noToken = new PredictionMarketToken(\\n            \\\"NO\\\", \\n            \\\"NO\\\",\\n            creator,\\n            (initialTokenAmount)\\n        );\\n        status = status == Status.NOT_INITIALIZED ? Status.ONE_TOKEN_MINTED : Status.TWO_TOKEN_MINTED;\\n        }\\n\\n    function initializeYesToken() external onlyOwner {\\nif (status != Status.NOT_INITIALIZED && status != Status.ONE_TOKEN_MINTED) {\\n    revert PredictionMarket__MarketAlreadyInitialized();\\n}\\n        uint256 initialTokenAmount = (pyUSD/initialTokenValue)*PRECISION;\\n        yesToken = new PredictionMarketToken(\\n            \\\"YES\\\",\\n            \\\"YES\\\",\\n           creator,\\n            (initialTokenAmount)\\n        );\\n        status = status == Status.NOT_INITIALIZED ? Status.ONE_TOKEN_MINTED : Status.TWO_TOKEN_MINTED;\\n    }\\n    \\n    function initializeMarket() external onlyOwner {\\n        if (status != Status.TWO_TOKEN_MINTED) {\\n            revert PredictionMarket__MarketNotInitialized();\\n        }\\n        require(IERC20(stakeToken).allowance(creator, address(this)) >= pyUSD, \\\"Insufficient allowance\\\");\\n        require(IERC20(stakeToken).transferFrom(creator, address(this), pyUSD), \\\"Transfer failed\\\");\\n        uint256 initialTokenAmount = (pyUSD/initialTokenValue)*PRECISION;\\n        uint256 initialYesAmountLocked = (initialTokenAmount * initialYesProbability * percentageToLock * 2) / 10000;\\n        uint256 initialNoAmountLocked = (initialTokenAmount * (100 - initialYesProbability) * percentageToLock * 2) / 10000;\\n        yesToken.transfer(creator, initialYesAmountLocked);\\n        noToken.transfer(creator, initialNoAmountLocked);\\n        status = Status.MARKET_INITIALIZED;\\n        isReported = false;\\n    }\\n\\n\\n\\n    function addLiquidity(uint256 _PYUSDAmount) external onlyOwner  {\\n\\n        if (isReported) {\\n            revert PredictionMarket__PredictionAlreadyReported();\\n        }\\n\\n        if (_PYUSDAmount == 0) {\\n            revert PredictionMarket__AmountMustBeGreaterThanZero();\\n        }\\n        require(IERC20(stakeToken).balanceOf(msg.sender) >= _PYUSDAmount, \\\"Insufficient balance\\\");\\n        require(IERC20(stakeToken).allowance(msg.sender, address(this)) >= _PYUSDAmount, \\\"Insufficient allowance\\\");\\n        require(IERC20(stakeToken).transferFrom(msg.sender, address(this), _PYUSDAmount), \\\"Transfer failed\\\");\\n        \\n        uint256 tokenAmount =( _PYUSDAmount/initialTokenValue)*PRECISION;\\n        \\n        pyUSD += _PYUSDAmount;\\n        \\n        yesToken.mint(address(this), tokenAmount);\\n        noToken.mint(address(this), tokenAmount);\\n        \\n        emit LiquidityAdded(msg.sender, _PYUSDAmount, tokenAmount);\\n    }\\n\\n\\n    function removeLiquidity(uint256 PYUSDToWithdraw) external onlyOwner {\\n      \\n        if (isReported) {\\n            revert PredictionMarket__PredictionAlreadyReported();\\n        }\\n        \\n        uint256 tokenAmount = (PYUSDToWithdraw/initialTokenValue)*PRECISION;\\n        \\n        if (yesToken.balanceOf(address(this)) < tokenAmount || noToken.balanceOf(address(this)) < tokenAmount) {\\n            revert PredictionMarket__InsufficientTokenReserve(Outcome.YES, tokenAmount);\\n        }\\n        \\n        pyUSD -= PYUSDToWithdraw;\\n        \\n        yesToken.burn(address(this), tokenAmount);\\n        noToken.burn(address(this), tokenAmount);\\n        \\n        IERC20(stakeToken).transfer(msg.sender, PYUSDToWithdraw);\\n        \\n        emit LiquidityRemoved(msg.sender, PYUSDToWithdraw, tokenAmount);\\n    }\\n\\n\\n\\n\\n    function _update_and_validate (\\n            bytes[] calldata _priceUpdateData\\n    ) public payable returns (PythStructs.PriceFeed memory ) {\\n        IPyth pyth = IPyth(pythContractAddress);\\n        uint256 fees = pyth.getUpdateFee(_priceUpdateData);\\n        require(msg.value >= fees, \\\"Insufficient funds\\\"); //*2 just to incorporate updation fee also\\n        bytes32[] memory priceIds = new bytes32[](1);\\n        priceIds[0] = pythPriceFeedId;\\n        uint64 minPublishTime = uint64(startTime);\\n        uint64 maxPublishTime = uint64(endTime);\\n        PythStructs.PriceFeed memory priceFeed;\\n\\n        priceFeed = pyth.parsePriceFeedUpdates{value: fees}(\\n            _priceUpdateData,\\n            priceIds,\\n            minPublishTime,\\n            maxPublishTime\\n        )[0];\\n        return priceFeed;\\n\\n    }\\n\\n    //first send high price update data\\n    //then send low price update data\\n    //then send update price data\\n    function report(bytes[] calldata _priceUpdateData) external payable   {\\n\\n        if (isReported) {\\n            revert PredictionMarket__PredictionAlreadyReported();\\n        }\\n        if(block.timestamp  < endTime){\\n            revert PredictionMarket__MarketNotEnded();\\n        }\\n        if(status == Status.MARKET_INITIALIZED){\\n            //resolve high price feed and update status to HIGHPRICE_RESOLVED\\n            highPriceFeed = _update_and_validate(_priceUpdateData);\\n            status = Status.HIGHPRICE_RESOLVED;\\n            return;\\n        }\\n        if(status == Status.HIGHPRICE_RESOLVED){\\n            //resolve low price feed and update status to LOWPRICE_RESOLVED\\n            lowPriceFeed = _update_and_validate(_priceUpdateData);\\n            status = Status.LOWPRICE_RESOLVED;\\n            return;\\n        }\\n        if(status == Status.LOWPRICE_RESOLVED){\\n            //update price feed and update status to PRICE_UPDATED\\n            isReported = true;\\n\\n            if(direction == Direction.Up){\\n            if(_normalizeTo8(uint256(int256(highPriceFeed.price.price)), highPriceFeed.price.expo) >= _normalizeTo8(targetPrice.base,targetPrice.expo)){\\n                outcome = Outcome.YES;\\n                winningToken = yesToken;\\n            } else {\\n                outcome = Outcome.NO;\\n                winningToken = noToken;\\n            }\\n        }\\n        if(direction == Direction.Down){\\n            if(_normalizeTo8(uint256(int256(lowPriceFeed.price.price)), lowPriceFeed.price.expo) <=  _normalizeTo8(targetPrice.base,targetPrice.expo)){\\n                outcome = Outcome.YES;\\n                winningToken = yesToken;\\n            } else {\\n                outcome = Outcome.NO;\\n                winningToken = noToken;\\n            }\\n        }\\n        IPyth pyth = IPyth(pythContractAddress);\\n        uint256 updatefees = pyth.getUpdateFee(_priceUpdateData);\\n        pyth.updatePriceFeeds{ value: updatefees }(_priceUpdateData);\\n        updatePriceFeed = pyth.getPriceNoOlderThan(pythPriceFeedId, 60);\\n        emit MarketReported(msg.sender, outcome, address(winningToken));\\n        emit CurrentPairTokenPrice(_normalizeTo8(uint256(int256(updatePriceFeed.price)), updatePriceFeed.expo));\\n        status = Status.PRICE_UPDATED;\\n        return;\\n        }\\n    }\\n   \\n\\n\\n    function resolveMarketAndWithdraw() external onlyOwner returns (uint256)  {\\n      \\n        if (!isReported) {\\n            revert PredictionMarket__PredictionNotReported();\\n        }\\n        \\n        uint256 winningTokens = winningToken.balanceOf(address(this));\\n        uint256 PYUSDFromWinningTokens = (winningTokens*initialTokenValue)/(10**PYUSD_DECIMALS);\\n        \\n        winningToken.burn(address(this), winningTokens);\\n        \\n        require(IERC20(stakeToken).transfer(msg.sender, PYUSDFromWinningTokens), \\\"Transfer failed\\\");\\n        \\n        emit MarketResolved(msg.sender, PYUSDFromWinningTokens);\\n        \\n        return PYUSDFromWinningTokens;\\n    }\\n\\n    /**\\n     * @notice Buy prediction outcome tokens with ETH, need to call priceInETH function first to get right amount of tokens to buy\\n     * @param _outcome The possible outcome (YES or NO) to buy tokens for\\n     * @param _amountTokenToBuy Amount of tokens to purchase\\n     */\\n    function buyTokensWithPYUSD(Outcome _outcome, uint256 _amountTokenToBuy) external  predictionNotReported notOwner amountGreaterThanZero(_amountTokenToBuy) {\\n      \\n        uint256 requiredPYUSD = getBuyPriceInPYUSD(_outcome, _amountTokenToBuy);\\n        \\n        require(IERC20(stakeToken).balanceOf(msg.sender) >= requiredPYUSD, \\\"Insufficient PYUSD balance\\\");\\n        require(IERC20(stakeToken).allowance(msg.sender, address(this)) >= requiredPYUSD, \\\"Insufficient PYUSD allowance\\\");\\n        require(IERC20(stakeToken).transferFrom(msg.sender, address(this), requiredPYUSD), \\\"PYUSD transfer failed\\\");\\n        \\n        PredictionMarketToken token = _outcome == Outcome.YES ? yesToken : noToken;\\n        \\n        bool success = token.transfer(msg.sender, _amountTokenToBuy);\\n        if (!success) {\\n            revert PredictionMarket__TokenTransferFailed();\\n        }\\n        \\n        emit TokensPurchased(msg.sender, _outcome, _amountTokenToBuy, requiredPYUSD);\\n    }\\n\\n\\n    function sellTokensForPYUSD(Outcome _outcome, uint256 _tradingAmount) external predictionNotReported notOwner amountGreaterThanZero(_tradingAmount) {\\n     \\n        PredictionMarketToken token = _outcome == Outcome.YES ? yesToken : noToken;\\n        \\n        if (token.balanceOf(msg.sender) < _tradingAmount) {\\n            revert PredictionMarket__InsufficientBalance(_tradingAmount, token.balanceOf(msg.sender));\\n        }\\n        \\n        if (token.allowance(msg.sender, address(this)) < _tradingAmount) {\\n            revert PredictionMarket__InsufficientAllowance(_tradingAmount, token.allowance(msg.sender, address(this)));\\n        }\\n        \\n        uint256 PYUSDToRecieve = getSellPriceInPYUSD(_outcome, _tradingAmount);\\n        \\n        bool success = token.transferFrom(msg.sender, address(this), _tradingAmount);\\n        if (!success) {\\n            revert PredictionMarket__TokenTransferFailed();\\n        }\\n        require(IERC20(stakeToken).transfer(msg.sender, PYUSDToRecieve), \\\"Transfer failed\\\");\\n        emit TokensSold(msg.sender, _outcome, _tradingAmount, PYUSDToRecieve);\\n    }\\n    \\n    function redeemWinningTokens(uint256 _amount) external predictionReported notOwner amountGreaterThanZero(_amount) {\\n     \\n        if (winningToken.balanceOf(msg.sender) < _amount) {\\n            revert PredictionMarket__InsufficientWinningTokens();\\n        }\\n        \\n        uint256 PYUSDToRecieve = (_amount * initialTokenValue) / (10**PYUSD_DECIMALS);\\n        \\n        pyUSD -= PYUSDToRecieve;\\n        \\n        winningToken.burn(msg.sender, _amount);\\n        \\n        require(IERC20(stakeToken).transfer(msg.sender, PYUSDToRecieve), \\\"Transfer failed\\\");\\n        \\n        emit WinningTokensRedeemed(msg.sender, _amount, PYUSDToRecieve);\\n    }\\n\\n\\n    function getBuyPriceInPYUSD(Outcome _outcome, uint256 _tradingAmount) public view returns (uint256) {\\n       \\n        return _calculatePriceINPYUSD(_outcome, _tradingAmount, false);\\n    }\\n\\n  \\n    function getSellPriceInPYUSD(Outcome _outcome, uint256 _tradingAmount) public view returns (uint256) {\\n      \\n        return _calculatePriceINPYUSD(_outcome, _tradingAmount, true);\\n    }\\n\\n    /////////////////////////\\n    /// Helper Functions ///\\n    ////////////////////////\\n\\n    function _calculatePriceINPYUSD(\\n        Outcome _outcome,\\n        uint256 _tradingAmount,\\n        bool _isSelling\\n    ) private view returns (uint256) {\\n\\n        (uint256 currentTokenReserve, uint256 currentOtherTokenReserve) = _getCurrentReserves(_outcome);\\n        \\n        if (!_isSelling) {\\n            // When buying, we check if we have enough tokens to sell\\n            if (currentTokenReserve < _tradingAmount) {\\n                revert PredictionMarket__InsufficientLiquidity();\\n            }\\n        }\\n        \\n        // Calculate initial token amount (total supply)\\n        uint256 initialTokenAmount = (pyUSD/initialTokenValue)*PRECISION;\\n        \\n        // Calculate current tokens sold\\n        uint256 currentTokenSoldBefore = initialTokenAmount - currentTokenReserve;\\n        uint256 currentOtherTokenSold = initialTokenAmount - currentOtherTokenReserve;\\n        uint256 totalTokensSoldBefore = currentTokenSoldBefore + currentOtherTokenSold;\\n        \\n        uint256 probabilityBefore = _calculateProbability(currentTokenSoldBefore, totalTokensSoldBefore);\\n        \\n        uint256 currentTokenSoldAfter;\\n        uint256 totalTokensSoldAfter;\\n        \\n        if (_isSelling) {\\n            // When selling, tokens go back to reserve, so sold amount decreases\\n            currentTokenSoldAfter = currentTokenSoldBefore - _tradingAmount;\\n            totalTokensSoldAfter = totalTokensSoldBefore - _tradingAmount;\\n        } else {\\n            // When buying, tokens leave reserve, so sold amount increases\\n            currentTokenSoldAfter = currentTokenSoldBefore + _tradingAmount;\\n            totalTokensSoldAfter = totalTokensSoldBefore + _tradingAmount;\\n        }\\n        \\n        uint256 probabilityAfter = _calculateProbability(currentTokenSoldAfter, totalTokensSoldAfter);\\n        uint256 probabilityAvg = (probabilityBefore + probabilityAfter) / 2;\\n        \\n        return (initialTokenValue  * probabilityAvg * _tradingAmount) / (PRECISION *PRECISION );\\n    }\\n\\n    /**\\n     * @dev Internal helper to get the current reserves of the tokens\\n     * @param _outcome The possible outcome (YES or NO)\\n     * @return The current reserves of the tokens\\n     */\\n    function _getCurrentReserves(Outcome _outcome) private view returns (uint256, uint256) {\\n      \\n        if (_outcome == Outcome.YES) {\\n            return (yesToken.balanceOf(address(this)), noToken.balanceOf(address(this)));\\n        } else {\\n            return (noToken.balanceOf(address(this)), yesToken.balanceOf(address(this)));\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal helper to calculate the probability of the tokens\\n     * @param tokensSold The number of tokens sold\\n     * @param totalSold The total number of tokens sold\\n     * @return The probability of the tokens\\n     */\\n    function _calculateProbability(uint256 tokensSold, uint256 totalSold) private pure returns (uint256) {\\n      \\n        if (totalSold == 0) {\\n            return PRECISION / 2; // 50% if no tokens sold\\n        }\\n        return (tokensSold * PRECISION) / totalSold;\\n    }\\n\\n    /// @notice Normalize a Pyth price to 8 decimals\\n    /// @param priceAbs Absolute value of the price (must be positive)\\n    /// @param expo The exponent provided by Pyth (e.g., -8)\\n    /// @return normalizedPrice Price scaled to 8 decimals\\n    function _normalizeTo8(uint256 priceAbs, int32 expo) internal pure returns (uint256 normalizedPrice) {\\n        // Target exponent is -8\\n        if (expo == -8) {\\n            return priceAbs;\\n        } else if (expo < -8) {\\n            uint32 divExp = uint32(uint32(-8 - expo));\\n            return priceAbs / _pow10(divExp);\\n        } else {\\n            // expo > -8\\n            uint32 mulExp = uint32(uint32(expo - (-8)));\\n            return priceAbs * _pow10(mulExp);\\n        }\\n    }\\n\\n    /// @notice 10^exp helper\\n    function _pow10(uint32 exp) internal pure returns (uint256) {\\n        uint256 result = 1;\\n        for (uint32 i = 0; i < exp; i++) {\\n            result *= 10;\\n        }\\n        return result;\\n    }\\n}\",\"keccak256\":\"0x36db92c2a1de90325750250bf09a8a67f4b7e7afe51d7088282953a4be867182\",\"license\":\"MIT\"},\"contracts/PredictionMarketToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ncontract PredictionMarketToken is ERC20 {\\n    error PredictionMarketToken__OnlyPredictionMarketCanMint();\\n    error PredictionMarketToken__OnlyPredictionMarketCanBurn();\\n    error PredictionMarketToken__LiquidityProviderCantTransfer();\\n\\n    address public predictionMarket;\\n    address public liquidityProvider;\\n\\n    constructor(\\n        string memory name,\\n        string memory symbol,\\n        address _liquidityProvider,\\n        uint256 initialSupply\\n    ) ERC20(name, symbol) {\\n        predictionMarket = msg.sender;\\n        liquidityProvider = _liquidityProvider;\\n        _mint(msg.sender, initialSupply);\\n    }\\n\\n    function mint(address to, uint256 amount) external {\\n        if (msg.sender != predictionMarket) {\\n            revert PredictionMarketToken__OnlyPredictionMarketCanMint();\\n        }\\n        _mint(to, amount);\\n    }\\n\\n    function burn(address from, uint256 amount) external {\\n        if (msg.sender != predictionMarket) {\\n            revert PredictionMarketToken__OnlyPredictionMarketCanBurn();\\n        }\\n        _burn(from, amount);\\n    }\\n\\n    function transfer(address to, uint256 amount) public override returns (bool) {\\n        if (msg.sender == liquidityProvider) {\\n            revert PredictionMarketToken__LiquidityProviderCantTransfer();\\n        }\\n        return super.transfer(to, amount);\\n    }\\n    function decimals() public pure override returns (uint8) {\\n        return 6;\\n    }\\n\\n    function transferFrom(address from, address to, uint256 amount) public override returns (bool) {\\n        if (from == liquidityProvider) {\\n            revert PredictionMarketToken__LiquidityProviderCantTransfer();\\n        }\\n        return super.transferFrom(from, to, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xd9ff59b219519a899a64477116b44733a0e8dce12c5628e74c3c2510d3b2306f\",\"license\":\"MIT\"},\"contracts/interfaces/IPredictionFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { PredictionMarket } from \\\"../PredictionMarket.sol\\\";\\n\\n/// @title IPredictionFactory - Interface for prediction market factory\\n/// @author PredictX\\ninterface IPredictionFactory {\\n    /// @notice Event emitted when a new prediction is created\\n    event PredictionCreated(\\n        uint256 indexed predictionId,\\n        address indexed creator,\\n        address predictionAddress,\\n        uint256 endTime,\\n        uint256 targetPrice\\n    );\\n\\n\\n    function createPrediction(\\n        string memory _pairName,\\n        PredictionMarket.Direction _direction,\\n        PredictionMarket.Price memory _targetPrice,\\n        uint256 _endTime,\\n        string memory _metadataURI,\\n        uint256 _initialLiquidity\\n    ) external returns (address);\\n\\n    /// @notice Withdraw accumulated protocol fees (ERC20 or ETH) to the owner\\n    /// @param token Address of ERC20 token to withdraw, or address(0) for ETH\\n    function withdrawProtocolFees(address token) external;\\n\\n    /// @notice Returns list of prediction ids created by user\\n    /// @param _user Address of the user\\n    /// @return Array of prediction IDs created by the user\\n    function getUserPredictions(address _user) external view returns (uint256[] memory);\\n\\n    /// @notice Returns outcome of a specific prediction\\n    /// @param _predictionId ID of the prediction\\n    /// @return Outcome of the prediction (Yes, No, or Undetermined)\\n    function getPredictionOutcome(uint256 _predictionId) external view returns (PredictionMarket.Outcome);\\n\\n    /// @notice Get the address of a prediction by its ID\\n    /// @param _predictionId ID of the prediction\\n    /// @return Address of the prediction contract\\n    function predictions(uint256 _predictionId) external view returns (address);\\n\\n    /// @notice Get the total number of predictions created\\n    /// @return Total count of predictions\\n    function predictionCount() external view returns (uint256);\\n\\n}\\n\",\"keccak256\":\"0xa82b0e1501a42d5cdf5351e7403a52d70cf31673ab1d1071de9e7d057f3341a2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080806040523461007e5733156100685760008054336001600160a01b03198216811783556040519290916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a36001805561573290816100848239f35b631e4fbdf760e01b815260006004820152602490fd5b600080fdfe60806040818152600491823610156200001757600080fd5b600090813560e01c9081624fbbb014620009ea575080632d80caa51462000760578063715018a614620007025780638da5cb5b14620006d85780638e0596a214620006b7578063a6cb421814620005bc578063c285f8531462000505578063d52b8198146200018d578063f2fde38b14620000fb5763f6c33179146200009c57600080fd5b34620000f85781600319360112620000f857620000b862000a1c565b6001600160a01b0316815260209290925280822080546024359390841015620000f85750602092620000ea9162000af8565b91905490519160031b1c8152f35b80fd5b5091346200018957602036600319011262000189576200011a62000a1c565b906200012562000b27565b6001600160a01b039182169283156200017357505082546001600160a01b0319811683178455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b51631e4fbdf760e01b8152908101849052602490fd5b8280fd5b509034620005015760e0366003190112620005015767ffffffffffffffff928035848111620004eb57620001c5903690830162000aab565b6024938435926002841015620005015784604319360112620005015784519285840184811089821117620004ef5786526044358452606435978860030b8903620004eb576020988986019081526084359660a435838111620004e75762000230903690870162000aab565b60c43592428a1115620004af57428a038a81116200049d576202a300106200044c578315620003f857620002648662000ba0565b8b519661495280890197881189891017620003e657928f92620002b18f9361012097948c9b9a9996620002e1988d62000dab9039338c5230908c015261014080918c01528a019062000b79565b93606089015260808801528b5160a08801525160030b60c08701528b60e087015285820361010087015262000b79565b920152039083f0958615620003dc576002549660018801809811620003ca578760025560018060a01b031696835260038852858320876bffffffffffffffffffffffff60a01b825416179055338352818852858320906002549382549368010000000000000000851015620003ba5750505090620003659160018201815562000af8565b819291549060031b91821b91600019901b1916179055600254905183519285845286840152838301527f7bed24594bc69eabc466d2e497d2f8ec45df38dea10026d0c4e0b31cb0a9b9c660603393a351908152f35b634e487b7160e01b825260419052fd5b50634e487b7160e01b83526011825282fd5b85513d84823e3d90fd5b634e487b7160e01b8b5260418a528e8bfd5b50895162461bcd60e51b81528087018d90526028818d01527f496e697469616c206c6971756964697479206d75737420626520677265617465604482015267072207468616e20360c41b6064820152608490fd5b50895162461bcd60e51b81528087018d90526025818d01527f456e64206d757374206265206c657373207468616e203220646179732066726f6044820152646d206e6f7760d81b6064820152608490fd5b634e487b7160e01b8952601188528c89fd5b50895162461bcd60e51b81528087018d90526012818d015271456e64206d7573742062652066757475726560701b6044820152606490fd5b8680fd5b8380fd5b634e487b7160e01b8452604183528784fd5b5080fd5b50829034620000f8576020918260031936011262000501579192916001600160a01b036200053262000a1c565b1682528352818120908251808584549182815201908194845286842090845b818110620005a757505050816200056a91038262000a6b565b83519485948186019282875251809352850193925b8281106200058f57505050500390f35b8351855286955093810193928101926001016200057f565b82548452928801926001928301920162000551565b50829034620000f8576020928360031936011262000501578235825260038452808220546001600160a01b03168015620006875790848493928251948580926327793f8760e01b82525afa9283156200067c5782936200063d575b50519260038310156200062a5750508152f35b634e487b7160e01b825260219052602490fd5b9092508481813d831162000674575b62000658818362000a6b565b8101031262000501575160038110156200050157918562000617565b503d6200064c565b5051903d90823e3d90fd5b815162461bcd60e51b8152808501869052600a602482015269125b9d985b1a59081a5960b21b6044820152606490fd5b50903462000501578160031936011262000501576020906002549051908152f35b5090346200050157816003193601126200050157905490516001600160a01b039091168152602090f35b5034620000f85780600319360112620000f8576200071f62000b27565b80546001600160a01b03198116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b50919034620001895760209081600319360112620004eb576200078262000a1c565b6200078c62000b27565b600260015414620009da5760026001556001600160a01b03908116806200086c5750479081156200083b578580809381938254165af13d1562000835573d620007d58162000a8e565b90620007e48451928362000a6b565b815285843d92013e5b15620007fe575050505b6001805580f35b5162461bcd60e51b8152918201526013602482015272115512081dda5d1a191c985dc819985a5b1959606a1b604482015260649150fd5b620007ed565b50505162461bcd60e51b815291820152600b60248201526a4e6f20455448206665657360a81b604482015260649150fd5b82516370a0823160e01b8152308682015290918482602481865afa918215620009d05787926200099b575b50811562000968579060448592885416888651958694859363a9059cbb60e01b85528b85015260248401525af19081156200095e5785916200091d575b5015620008e457505050620007f7565b5162461bcd60e51b8152918201526015602482015274151bdad95b881dda5d1a191c985dc819985a5b1959605a1b604482015260649150fd5b90508281813d831162000956575b62000937818362000a6b565b810103126200095257518015158103620009525738620008d4565b8480fd5b503d6200092b565b82513d87823e3d90fd5b835162461bcd60e51b8152808701869052600d60248201526c4e6f20746f6b656e206665657360981b6044820152606490fd5b9091508481813d8311620009c8575b620009b6818362000a6b565b81010312620004e75751903862000897565b503d620009aa565b84513d89823e3d90fd5b8151633ee5aeb560e01b81528490fd5b929050346200050157602036600319011262000501579235815260036020908152929020546001600160a01b03168152f35b600435906001600160a01b038216820362000a3357565b600080fd5b6040810190811067ffffffffffffffff82111762000a5557604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff82111762000a5557604052565b67ffffffffffffffff811162000a5557601f01601f191660200190565b81601f8201121562000a335780359062000ac58262000a8e565b9262000ad5604051948562000a6b565b8284526020838301011162000a3357816000926020809301838601378301015290565b805482101562000b115760005260206000200190600090565b634e487b7160e01b600052603260045260246000fd5b6000546001600160a01b0316330362000b3c57565b60405163118cdaa760e01b8152336004820152602490fd5b60005b83811062000b685750506000910152565b818101518382015260200162000b57565b9060209162000b948151809281855285808601910162000b54565b601f01601f1916010190565b604080519160209262000bd284828162000bc4818301968781519384920162000b54565b810103808452018262000a6b565b519020815183810190670c525390d21554d160c21b82526008815262000bf88162000a38565b519020811462000d835781518381019066105055915554d160ca1b82526007815262000c248162000a38565b519020811462000d5c578151838101906910925510d3d2539554d160b21b8252600a815262000c538162000a38565b519020811462000d3557815183810190651093909554d160d21b82526006815262000c7e8162000a38565b519020811462000d0e57815183810190651155121554d160d21b82526006815262000ca98162000a38565b5190201462000ce85760649250519062461bcd60e51b82526004820152601060248201526f2ab739bab83837b93a32b2103830b4b960811b6044820152fd5b50507fff61491a931112ddf1bd8147cd1b641375f79f5825126d665480874634fd0ace90565b5050507f2f95862b045670cd22bee3114c39763a4a08beeb663b145d283c31d7d1101c4f90565b5050507fc5e0e0c92116c0c070a242b254270441a6201af680a33e0381561c59db3266c990565b5050507f2b9ab1e972a281585084148ba1389800799bd4be63b957507db1349314e4744590565b5050507f63f341689d98a12ef60a5cff1d7f85c70a9e17bf1575f0e7c0b2512d48b1c8b39056fe604060c0815234620005395762004952803803806200001e816200053e565b928339810190808203610140811262000539576200003c8262000564565b9060206200004c81850162000564565b868501519094906001600160401b0381116200053957866200007091830162000579565b60608201516002811015620005395788608084015195609f1901126200053957885197888a016001600160401b0381118a82101762000433578a5260a0840151895260c08401518060030b810362000539578986015260e08401516101008501519091906001600160401b038111620005395761012091620000f491870162000579565b940151986001600160a01b038816156200052157600080546001600160a01b031981166001600160a01b038b81169182178455899493919216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a3600197888055612710600255610a3261ffff19600354161760035560ff60a01b196007541660075573cac524bca292aaade2df8a05cc58f0a65b1b3bb960805273dd24f84d36bf92c65f92307595335bdfab5bbd2160a052600d558051600e55015163ffffffff19600f54169063ffffffff1617600f55600a55825160018060401b0381116200043357600b54938685811c9516801562000516575b8686101462000412578190601f95868111620004bf575b508690868311600114620004555760009262000449575b5050600019600383901b1c191690861b17600b555b4260095560ff8019600c5416911617600c5580519260018060401b03841162000433576010548581811c9116801562000428575b828210146200041257838111620003c6575b50809284116001146200035957509282939183926000946200034d575b50501b916000199060031b1c1916176010555b6008805461ffff60a01b1916600160a91b179055601280546001600160a01b03199081166001600160a01b03938416179091556011805490911692909116919091179055600455516143669081620005ec823960805181818161057e01528181610c83015281816110c70152818161151c015281816116bc0152818161173f01528181611b620152611e7f015260a0518181816112e1015281816128680152612bfc0152f35b01519250388062000294565b919083601f198116601060005284600020946000905b88838310620003ab575050501062000391575b505050811b01601055620002a7565b015160001960f88460031b161c1916905538808062000382565b8587015188559096019594850194879350908101906200036f565b6010600052816000208480870160051c82019284881062000408575b0160051c019086905b828110620003fb57505062000277565b60008155018690620003eb565b92508192620003e2565b634e487b7160e01b600052602260045260246000fd5b90607f169062000265565b634e487b7160e01b600052604160045260246000fd5b0151905038806200021c565b90889350601f19831691600b600052886000209260005b8a828210620004a857505084116200048e575b505050811b01600b5562000231565b015160001960f88460031b161c191690553880806200047f565b8385015186558c979095019493840193016200046c565b909150600b600052866000208680850160051c8201928986106200050c575b918a91869594930160051c01915b828110620004fc57505062000205565b600081558594508a9101620004ec565b92508192620004de565b94607f1694620001ee565b8a51631e4fbdf760e01b815260006004820152602490fd5b600080fd5b6040519190601f01601f191682016001600160401b038111838210176200043357604052565b51906001600160a01b03821682036200053957565b919080601f84011215620005395782516001600160401b0381116200043357602090620005af601f8201601f191683016200053e565b92818452828287010111620005395760005b818110620005d757508260009394955001015290565b8581018301518482018401528201620005c156fe60806040818152600490813610156200001757600080fd5b600092833560e01c90816302d05d3f14620023735750806303ee438c14620022a75780630dd919d2146200225e57806311a9f10a1462002233578063190bfcd014620022125780631ca9b43514620021f1578063200d2ed214620021be57806327793f8714620021905780633197cbb6146200216f578063336fe2c91462001e16578063361bc1b51462001deb578063386b166e1462001dc457806340794c3b1462001cb457806346e777821462001c905780634c5b59a51462001a4e57806351c6590a14620016eb57806351ed6a3014620016a557806357fa6030146200168e5780635c3c107e1462001665578063645539ed146200162257806365e23abc1462001426578063715018a614620013c857806378e9792514620013a75780638197e7cd14620013105780638afffea514620012ca5780638da5cb5b14620012a05780639c8f9f231462000f54578063a8512a0a1462000f2c578063adc6013e1462000b27578063b886f6c714620009ec578063bb9c57fa14620009cb578063c3cca65e14620009aa578063c45a0155146200097f578063cc7e7c2014620008e4578063d44cd8dd146200051b578063d612527114620004d2578063dc38679c14620004a5578063e736e3f71462000485578063eb0c085614620002db578063f0d9bb2014620002ac5763f2fde38b146200021157600080fd5b34620002a8576020366003190112620002a8576001600160a01b03823581811693919290849003620002a457620002476200255e565b83156200028e575050600054826001600160601b0360a01b821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a380f35b51631e4fbdf760e01b8152908101849052602490fd5b8480fd5b8280fd5b838234620002d75781600319360112620002d75760065490516001600160a01b039091168152602090f35b5080fd5b5034620002a85782600319360112620002a857620002f86200255e565b60ff60085460a01c1660078110156200047257801515908162000465575b5062000458576200032c8254600254906200258b565b90620f424091828102928184041490151715620004455760125481516001600160a01b03939091841690610d86808401906001600160401b03821185831017620004325784939291606091620035ab86396080808252600290820152614e4f60f01b60a0820152620003b960c08201828103602084015260409060028152614e4f60f01b60208201520190565b93878201520152039085f0908115620004295750166001600160601b0360a01b600754161760075560ff60085460a01c169060078210156200041657506200040a57620004076001620025d6565b80f35b620004076002620025d6565b634e487b7160e01b835260219052602482fd5b513d85823e3d90fd5b634e487b7160e01b895260418852602489fd5b634e487b7160e01b845260118352602484fd5b5163cf5ba7b960e01b8152fd5b6001915014153862000316565b634e487b7160e01b845260218352602484fd5b509034620002a85782600319360112620002a85760209250549051908152f35b508234620004cf5780600319360112620004cf5750600e54600f5460030b82519182526020820152f35b80fd5b6101208262000519620004f0620004e936620024ae565b906200283e565b91805192805184526200050c60208201516020860190620024ff565b015160a0830190620024ff565bf35b509034620002a8576200052e3662002469565b909260ff60075460a01c16620008d55784546001600160a01b03939084163314620008c7578215620008b95762000566838662003194565b82516370a0823160e01b8152338382015290946020917f00000000000000000000000000000000000000000000000000000000000000008216908381602481855afa90811562000836579088918b9162000882575b501062000840578451636eb1769f60e11b8152338582019081523060208201528490829081906040010381855afa90811562000836579088918b91620007fa575b5010620007b85784516323b872dd60e01b815233858201908152306020820152604081018990529091849183919082908d90829060600103925af1908115620007ae5789916200078c575b50156200075357600387101562000740578188918815600014620007355780600654165b865163a9059cbb60e01b815233878201908152602081018a905290948593849283906040010393165af19182156200072b578892620006f7575b505015620006e9575090620006e37f78408fb808ae2018d121a91ae47221eb4b85530dc14522ce2ddcb93083e269d693925192839233968462003175565b0390a280f35b90516318161dad60e21b8152fd5b6200071b9250803d1062000723575b620007128183620023fc565b81019062002645565b3880620006a5565b503d62000706565b84513d8a823e3d90fd5b80600754166200066b565b634e487b7160e01b885260218352602488fd5b50606492519162461bcd60e51b8352820152601560248201527414165554d1081d1c985b9cd9995c8819985a5b1959605a1b6044820152fd5b620007a79150833d85116200072357620007128183620023fc565b3862000647565b85513d8b823e3d90fd5b5050606492519162461bcd60e51b8352820152601c60248201527f496e73756666696369656e7420505955534420616c6c6f77616e6365000000006044820152fd5b809250858092503d83116200082e575b620008168183620023fc565b81010312620008295787905138620005fc565b600080fd5b503d6200080a565b86513d8c823e3d90fd5b5050606492519162461bcd60e51b8352820152601a60248201527f496e73756666696369656e742050595553442062616c616e63650000000000006044820152fd5b809250858092503d8311620008b1575b6200089e8183620023fc565b81010312620008295787905138620005bb565b503d62000892565b9051632688641b60e21b8152fd5b905163086b2ac360e41b8152fd5b516378e34bb960e01b81529050fd5b508234620004cf5780600319360112620004cf57506018546200097b8251926200090e84620023c4565b601954908160070b85526001600160401b03918281831c16602087015260801c60030b81860152601a5460608601528051916200094b83620023c4565b601b54908160070b845281831c16602084015260801c60030b81830152601c546060830152519384938462002531565b0390f35b838234620002d75781600319360112620002d75760115490516001600160a01b039091168152602090f35b838234620002d75781600319360112620002d7576020906005549051908152f35b838234620002d75781600319360112620002d757602090600d549051908152f35b5034620002a85782600319360112620002a85762000a096200255e565b60ff60085460a01c1660078110156200047257801515908162000b1a575b50620004585762000a3d8254600254906200258b565b90620f424091828102928184041490151715620004455760125481516001600160a01b03939091841690610d86808401906001600160401b03821185831017620004325784939291606091620035ab863960808082526003908201526259455360e81b60a082015262000acc60c082018281036020840152604090600381526259455360e81b60208201520190565b93878201520152039085f0908115620004295750166001600160601b0360a01b600654161760065560ff60085460a01c169060078210156200041657506200040a57620004076001620025d6565b6001915014153862000a27565b509034620002a85762000b3a3662002469565b600754919260a083901c60ff1662000f1e5785546001600160a01b0393908416331462000f0f57821562000f0057600385101562000eed5783908562000ee5575080600654165b16928551916370a0823160e01b808452338285015260209384816024818a5afa801562000e2c5786918b9162000eae575b501062000e3657508651636eb1769f60e11b8082523383830190815230602082015290919085908290819060400103818a5afa801562000e2c5786918b9162000df5575b501062000d5e575062000c0a84876200325e565b87516323b872dd60e01b81523383820190815230602082015260408101879052919690918591839182908d90829060600103925af190811562000d5457899162000d32575b501562000d2457865163a9059cbb60e01b8152339181019182526020820186905291839183919082908b90829060400103927f0000000000000000000000000000000000000000000000000000000000000000165af191821562000d1a57620006e3927fdb6c1cc84b96330a9be015b7f4d49df42a035945bf4bc3423e48a6e4259dbb7b96979262000ceb928a9262000cf8575b50506200265f565b5192839233968462003175565b62000d129250803d106200072357620007128183620023fc565b388062000ce3565b86513d89823e3d90fd5b86516318161dad60e21b8152fd5b62000d4d9150843d86116200072357620007128183620023fc565b3862000c4f565b88513d8b823e3d90fd5b875190815233828201908152306020820152909190899086908a90879081908790819003604001818d5afa93841562000dea579362000db3575b50516377594e6960e01b815292830152602482015260449150fd5b90925084813d831162000de2575b62000dcd8183620023fc565b81010312620008295760449351918562000d98565b503d62000dc1565b8251903d90823e3d90fd5b809250868092503d831162000e24575b62000e118183620023fc565b8101031262000829578590513862000bf6565b503d62000e05565b89513d8c823e3d90fd5b87519081523381830152908885898680866024818d5afa93841562000dea579362000e77575b505163053ab6d560e21b815292830152602482015260449150fd5b90925084813d831162000ea6575b62000e918183620023fc565b81010312620008295760449351918562000e5c565b503d62000e85565b809250868092503d831162000edd575b62000eca8183620023fc565b8101031262000829578590513862000bb2565b503d62000ebe565b811662000b81565b634e487b7160e01b875260218252602487fd5b508451632688641b60e21b8152fd5b50845163086b2ac360e41b8152fd5b84516378e34bb960e01b8152fd5b838234620002d75760209062000f4d62000f463662002469565b906200325e565b9051908152f35b5034620002a857602090816003193601126200129c5782359162000f776200255e565b6007549060ff8260a01c166200128c5762000f95600254856200258b565b91620f424092838102938185041490151715620012795760065484516370a0823160e01b80825230898301526001600160a01b03939284169290918581602481875afa908b82156200126e5787928794928a929162001233575b5010938415620011bb575b505050506200119d57879062001012878954620026ac565b8855803b15620002d7578551632770a7eb60e21b80825230828b01908152602081018890529092849183919082908490829060400103925af1801562001193579083916200117b575b50508260075416803b15620002a857865191825230828a01908152602081018790528391839182908490829060400103925af18015620011715762001155575b50845163a9059cbb60e01b815233978101978852602088018790529683928892918390036040019183917f0000000000000000000000000000000000000000000000000000000000000000165af19485156200114b577f96cd817c6329656790ef8fba7675405193677d39619571282f5e21f3a98cd059949562001129575b5082519485528401523392a280f35b6200114390823d84116200072357620007128183620023fc565b50386200111a565b83513d88823e3d90fd5b62001160906200239a565b6200116d5786386200109b565b8680fd5b86513d84823e3d90fd5b62001186906200239a565b620002d75781386200105b565b87513d85823e3d90fd5b845163a4d71b8160e01b815260008189015260248101859052604490fd5b8951908152308c8201529350909183916024918391165afa90811562001229579085918a91620011f2575b50108284388062000ffa565b809250858092503d831162001221575b6200120e8183620023fc565b81010312620008295784905138620011e6565b503d62001202565b86513d8b823e3d90fd5b93929450505081813d831162001266575b620012508183620023fc565b8101031262000829578491878792513862000fef565b503d62001244565b8951903d90823e3d90fd5b634e487b7160e01b875260118652602487fd5b82516378e34bb960e01b81528590fd5b8380fd5b838234620002d75781600319360112620002d757905490516001600160a01b039091168152602090f35b838234620002d75781600319360112620002d757517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b508234620004cf5780600319360112620004cf57506013546200097b8251926200133a84620023c4565b601454908160070b85526001600160401b03918281831c16602087015260801c60030b8186015260155460608601528051916200137783620023c4565b601654908160070b845281831c16602084015260801c60030b818301526017546060830152519384938462002531565b838234620002d75781600319360112620002d7576020906009549051908152f35b8334620004cf5780600319360112620004cf57620013e56200255e565b600080546001600160a01b0319811682556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b5034620002a85782600319360112620002a857620014436200255e565b60ff60075460a01c1615620016155760085481516370a0823160e01b81523084820152602094909390916001600160a01b03919082168686602481845afa958615620015d6578496620015e0575b50620f4240620014a460025488620025ac565b0495813b15620002a4578551632770a7eb60e21b8152308185019081526020810192909252939291859185919082908490829060400103925af18015620015d657918691858994620015b6575b875163a9059cbb60e01b815233928101928352602083019490945292945084928391829060400103927f0000000000000000000000000000000000000000000000000000000000000000165af1918215620015ab5790620015599262001589575b506200265f565b80518281527f316a0bcd9820c43f9ba8738fd680d536a8ac65080f56f96833f696f6dd5a12fd843392a251908152f35b620015a49150853d87116200072357620007128183620023fc565b3862001552565b8351903d90823e3d90fd5b9250925092620015c6906200239a565b620002a8578482879285620014f1565b85513d86823e3d90fd5b9095508681813d83116200160d575b620015fb8183620023fc565b81010312620008295751943862001491565b503d620015ef565b51635fd4000d60e11b8152fd5b50829034620002d75781600319360112620002d75760ff600c541690519160028210156200165257602083838152f35b634e487b7160e01b815260218452602490fd5b838234620002d75781600319360112620002d75760209060ff60075460a01c1690519015158152f35b83620004076200169e36620024ae565b9062002b2e565b838234620002d75781600319360112620002d757517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b5034620002a857602090816003193601126200129c578235926200170e6200255e565b60ff60075460a01c1662001a40578315620008b95781516370a0823160e01b815233828201526001600160a01b03907f00000000000000000000000000000000000000000000000000000000000000008216908581602481855afa908115620019c557908791899162001a09575b5010620019cf578351636eb1769f60e11b8152338482019081523060208201528690829081906040010381855afa8015620019c557879089906200198d575b620017c992501015620025ff565b83516323b872dd60e01b815233848201908152306020820152604081018890529091869183919082908b90829060600103925af1908115620019835790620018199188916200196857506200265f565b62001827600254866200258b565b91620f424092838102938185041490151715620019555790816200184e878994546200269e565b8155816006541691823b156200129c5785516340c10f1960e01b80825230848301908152602081018890529094869183919082908490829060400103925af180156200194b5790859162001933575b50506007541691823b156200129c578551908152309181019182526020820185905291839183919082908490829060400103925af18015620019295762001911575b50507fac1d76749e5447b7b16f5ab61447e1bd502f3bb4807af3b28e620d1700a6ee459282519485528401523392a280f35b6200191c906200239a565b620002a4578438620018df565b84513d84823e3d90fd5b6200193e906200239a565b6200129c5783386200189d565b87513d87823e3d90fd5b634e487b7160e01b875260119052602486fd5b620015a49150863d88116200072357620007128183620023fc565b84513d89823e3d90fd5b50508581813d8311620019bd575b620019a78183620023fc565b81010312620008295786620017c99151620017bb565b503d6200199b565b85513d8a823e3d90fd5b835162461bcd60e51b81528084018690526014602482015273496e73756666696369656e742062616c616e636560601b6044820152606490fd5b809250878092503d831162001a38575b62001a258183620023fc565b810103126200082957869051386200177c565b503d62001a19565b90516378e34bb960e01b8152fd5b50829034620002d75760209081600319360112620002a85783359160ff60075460a01c161562001c805783546001600160a01b0391908216331462001c7057831562001c605781600854169183516370a0823160e01b815233888201528281602481875afa90811562001c0f57908691889162001c29575b501062001c1957620f424062001adf60025487620025ac565b049262001aee848954620026ac565b8855803b156200116d578451632770a7eb60e21b815233818a01908152602081018890529091889183919082908490829060400103925af1801562001c0f5762001bf2575b50835163a9059cbb60e01b8152339781019788526020880184905295968291879182908a9082906040015b03927f0000000000000000000000000000000000000000000000000000000000000000165af19485156200114b577faeb4b315a6442ab135da41b9b7b337c712b68e5a6051ef6299965f3e58dbebbb949562001bc291889162001bd057506200265f565b82519485528401523392a280f35b62001beb9150833d85116200072357620007128183620023fc565b8862001552565b829162001b5e9762001c0586936200239a565b9750915062001b33565b85513d89823e3d90fd5b83516328f48e2f60e01b81528790fd5b809250848092503d831162001c58575b62001c458183620023fc565b810103126200116d578590518962001ac6565b503d62001c39565b8251632688641b60e21b81528690fd5b825163086b2ac360e41b81528690fd5b8151635fd4000d60e11b81528590fd5b838234620002d75781600319360112620002d75760209060ff600354169051908152f35b5034620002a85782600319360112620002a857805191836010549060019082821c92828116801562001db9575b602095868610821462001da6575084885290811562001d81575060011462001d23575b6200097b868662001d18828b0383620023fc565b51918291826200241e565b929550601083527f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae6725b82841062001d6d57505050826200097b9462001d1892820101943862001d04565b805486850188015292860192810162001d4c565b60ff191687860152505050151560051b830101925062001d18826200097b3862001d04565b634e487b7160e01b845260229052602483fd5b93607f169362001ce1565b838234620002d75781600319360112620002d75760209060ff60035460081c169051908152f35b838234620002d75781600319360112620002d75760085490516001600160a01b039091168152602090f35b5034620002a85782600319360112620002a85762001e336200255e565b60ff60085460a01c166007811015620004725760020362002162576012548151636eb1769f60e11b81526001600160a01b039182168185018181523060208281019190915293959394927f000000000000000000000000000000000000000000000000000000000000000087169290918690839081906040010381865afa9182156200072b5790869291899262002124575b509262001f189362001edc875480941015620025ff565b85516323b872dd60e01b81526001600160a01b03909116878201908152306020820152604081019390935293849283918b918391606090910190565b03925af19081156200211a579062001f389187916200158957506200265f565b62001f488254600254906200258b565b620f424090818102918183041490151715620021075760035460ff81169162001f8560ff62001f788584620025ac565b9360081c168093620025ac565b928360011b9380850460021490151715620020f45760640360ff8111620020f45762001fc1929160ff62001fbb921690620025ac565b620025ac565b948560011b9580870460021490151715620020e157806006541695878260125416878651809a8185816200201e8d63a9059cbb60e01b98898452612710809e0491840160209093929193604081019460018060a01b031681520152565b03925af19889156200117157889998969798620020bf575b50600754601254885192835285166001600160a01b0316988201988952949092046020880152909586939084900360400192849291165af19081156200042957506200209c575b8260ff60a01b19600360a01b8160085416176008556007541660075580f35b81620020b692903d106200072357620007128183620023fc565b5038806200207d565b620020d990873d89116200072357620007128183620023fc565b503862002036565b634e487b7160e01b875260118452602487fd5b634e487b7160e01b895260118652602489fd5b634e487b7160e01b865260118352602486fd5b82513d88823e3d90fd5b8381949293503d83116200215a575b6200213f8183620023fc565b8101031262002156579051859162001f1862001ec5565b8780fd5b503d62002133565b51637ca6958160e01b8152fd5b838234620002d75781600319360112620002d757602090600a549051908152f35b838234620002d75781600319360112620002d7576020906200051960ff60085460a81c16915180926200248a565b50829034620002d75781600319360112620002d75760ff60085460a01c1690519160078210156200165257602083838152f35b838234620002d75760209062000f4d6200220b3662002469565b9062003194565b838234620002d75781600319360112620002d7576020906002549051908152f35b838234620002d75781600319360112620002d75760075490516001600160a01b039091168152602090f35b838234620002d75781600319360112620002d757608090601d5490601e54908051928060070b84526001600160401b0381831c166020850152841c60030b908301526060820152f35b5034620002a85782600319360112620002a85780519183600b549060019082821c92828116801562002368575b602095868610821462001da6575084885290811562001d8157506001146200230a576200097b868662001d18828b0383620023fc565b929550600b83527f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db95b8284106200235457505050826200097b9462001d1892820101943862001d04565b805486850188015292860192810162002333565b93607f1693620022d4565b849034620002d75781600319360112620002d7576012546001600160a01b03168152602090f35b6001600160401b038111620023ae57604052565b634e487b7160e01b600052604160045260246000fd5b608081019081106001600160401b03821117620023ae57604052565b606081019081106001600160401b03821117620023ae57604052565b90601f801991011681019081106001600160401b03821117620023ae57604052565b6020808252825181830181905290939260005b8281106200245457505060409293506000838284010152601f8019910116010190565b81810186015184820160400152850162002431565b60409060031901126200082957600435600381101562000829579060243590565b906003821015620024985752565b634e487b7160e01b600052602160045260246000fd5b90602060031983011262000829576004356001600160401b039283821162000829578060238301121562000829578160040135938411620008295760248460051b8301011162000829576024019190565b60608091805160070b84526001600160401b036020820151166020850152604081015160030b60408501520151910152565b60a090620025546200255c949695939661012083019783526020830190620024ff565b0190620024ff565b565b6000546001600160a01b031633036200257357565b60405163118cdaa760e01b8152336004820152602490fd5b811562002596570490565b634e487b7160e01b600052601260045260246000fd5b81810292918115918404141715620025c057565b634e487b7160e01b600052601160045260246000fd5b600781101562002498576008805460ff60a01b191660a09290921b60ff60a01b16919091179055565b156200260757565b60405162461bcd60e51b8152602060048201526016602482015275496e73756666696369656e7420616c6c6f77616e636560501b6044820152606490fd5b908160209103126200082957518015158103620008295790565b156200266757565b60405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b6044820152606490fd5b91908201809211620025c057565b91908203918211620025c057565b60405190620026c982620023c4565b60006060838281528260208201528260408201520152565b60405190620026f082620023e0565b8160008152620026ff620026ba565b6020820152604062002710620026ba565b910152565b8183526020600583901b84018101939192906000818401855b84831062002740575050505050505090565b90919293949596601f19808883030184528835601e19843603018112156200082957830186810190356001600160401b038111620008295780360382136200082957838893601f83808796879660019a52868601376000858286010152011601019901930193019195949392906200272e565b805115620027c15760200190565b634e487b7160e01b600052603260045260246000fd5b91908260809103126200082957604051620027f281620023c4565b809280518060070b81036200082957825260208101516001600160401b03811681036200082957602083015260408101518060030b810362000829576040830152606090810151910152565b62002848620026e1565b506040805163d47eed4560e01b81526020600482018190529193919291907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690848180620028a460248201878962002715565b0381855afa90811562002b235760009162002af0575b5080341062002ab75785516001600160401b039481880186811183821017620023ae578895939291955260018082528782019188368437600d54620028ff82620027b3565b5287600954169088600a54169262002916620026e1565b508a6200293d8d519a8b99634716e9c560e01b8b52608060048c015260848b019162002715565b8881036003190160248a015292518084529201949160005b8c82821062002aa05750505050508492600096949284926044840152606483015203925af192831562002a95576000936200299e575b5050506200299a9150620027b3565b5190565b9091923d8082853e620029b28185620023fc565b8301928281850312620002d757805190858211620002a857019280601f85011215620002d757835194851162002a8157855195620029f6848760051b0188620023fc565b858752838701928461012080980287010195838711620002d7578501935b86851062002a325750505050505050506200299a903880806200298b565b8785850312620002d757858891845162002a4c81620023e0565b8751815262002a5e87848a01620027d7565b8382015262002a718760a08a01620027d7565b8682015281520194019362002a14565b634e487b7160e01b82526041600452602482fd5b84513d6000823e3d90fd5b845188528b99509687019690930192820162002955565b855162461bcd60e51b8152600481018690526012602482015271496e73756666696369656e742066756e647360701b6044820152606490fd5b908582813d831162002b1b575b62002b098183620023fc565b81010312620004cf57505138620028ba565b503d62002afd565b86513d6000823e3d90fd5b60078054909260ff9260009260a01c84166200316357600a544210620031515760089484865460a01c16818110156200313d576003809114620030855785875460a01c1694828610156200307157600480961462002fb857875495878760a01c168481101562002f155760051462002bab57505050505050505050565b835460ff60a01b19808216600160a01b178655600c549098908a16600281101562002fa5571562002f28575b505087600c5416600281101562002f155760011462002e96575b60018060a01b0397887f00000000000000000000000000000000000000000000000000000000000000001692604096875163d47eed4560e01b81526020998a868301528a828062002c4760248201858862002715565b03818a5afa91821562002e8c57849262002e57575b50863b156200129c5791839162002c90938c8c5195869485938493631df3cbc560e31b85528c850152602484019162002715565b0391895af1801562002e4d5762002e3b575b50600d5493875194859463052571af60e51b8652850152603c602485015283604460809586935afa93841562002e2f57819462002db6575b5050928260609262002da5957fda06f234b668c93d5e36ae196cc16d06d14b6491a4ac4499042f0b351498f6689998979551601d5467ffffffffffffffff60401b8b8601518b1b16906001600160401b038b870151861b63ffffffff60801b169316906001600160601b0360a01b1617171794859384601d550151601e558c549b62002d6f8d8a5193849160a81c166200248a565b8c16898201527f54abe5cff8746fc59eefd3a10a4e9821354cd951ffef23d64fdb7939b6e2e419883392a21c900b910b620034c4565b9051908152a116600360a11b179055565b90919350823d841162002e27575b62002dd08183620023fc565b8101918382840312620004cf57509260609262002e1762002da596937fda06f234b668c93d5e36ae196cc16d06d14b6491a4ac4499042f0b351498f6689a999896620027d7565b9496979850928192955062002cda565b503d62002dc4565b508651903d90823e3d90fd5b62002e46906200239a565b3862002ca2565b88513d84823e3d90fd5b9091508a81813d831162002e84575b62002e728183620023fc565b810103126200129c5751903862002c5c565b503d62002e66565b8a513d86823e3d90fd5b62002eac6019548060801c850b90860b620034c4565b62002ebf600e54600f54860b90620034c4565b1062002ee95788546006546001600160a01b0316600161ff0160a01b031990911617895562002bf1565b88548454600161ff0160a01b03199091166001600160a01b039190911617600160a81b17895562002bf1565b634e487b7160e01b835260218252602483fd5b62002f3e6014548060801c870b90880b620034c4565b62002f51600e54600f54880b90620034c4565b1162002f8057505088546006546001600160a01b0316600161ff0160a01b03199091161789555b388062002bd7565b600161ff0160a01b0319166001600160a01b0390911617600160a81b17895562002f78565b634e487b7160e01b855260218452602485fd5b5050506060935062002fcb92506200283e565b8051601855602081015190815160195492604060208201519386828401519363ffffffff60801b956001600160401b039788966001600160601b0360a01b9a8b67ffffffffffffffff60401b998a9360801b8c16951691161791871b1617176019550151601a55015193845193601b5492602087015160401b1693604087015160801b1694169116171717601b550151601c55600560a01b60ff60a01b19825416179055565b634e487b7160e01b81526021600452602490fd5b5050606093506200309792506200283e565b8051601355602081015190815160145492604060208201519386828401519363ffffffff60801b956001600160401b039788966001600160601b0360a01b9a8b67ffffffffffffffff60401b998a9360801b8c16951691161791871b161717601455015160155501519384519360165492602087015160401b1693604087015160801b16941691161717176016550151601755600160a21b60ff60a01b19825416179055565b634e487b7160e01b85526021600452602485fd5b60405163039d21e760e11b8152600490fd5b6040516378e34bb960e01b8152600490fd5b6040919493926200318b8260608101976200248a565b60208201520152565b6200319f90620032e4565b918082106200324c5760045491620031bb60025480946200258b565b92620f424093848102948186041490151715620025c0576200323e84620032376200320c6200320564e8d4a5100099620031fe62001fbb98620032489b620026ac565b94620026ac565b836200269e565b620032308762003229816200322285886200348f565b966200269e565b926200269e565b906200348f565b906200269e565b60011c90620025ac565b0490565b60405163224e54d760e01b8152600490fd5b6200326990620032e4565b91600454916200327d60025480946200258b565b92620f424093848102948186041490151715620025c0576200323e8462003237620032c06200320564e8d4a5100099620031fe62001fbb98620032489b620026ac565b6200323087620032dd81620032d685886200348f565b96620026ac565b92620026ac565b60038110156200249857620033e3576006546040516370a0823160e01b808252306004830152602093926001600160a01b03929085908290602490829087165afa9283156200339f578591600094620033ab575b50600754169160246040518094819382523060048301525afa9384156200339f5760009462003368575b50509190565b8181959293953d831162003397575b620033838183620023fc565b81010312620004cf57505191388062003362565b503d62003377565b6040513d6000823e3d90fd5b9182819592953d8311620033db575b620033c68183620023fc565b81010312620004cf5750849051923862003338565b503d620033ba565b6007546040516370a0823160e01b808252306004830152602093926001600160a01b03929085908290602490829087165afa9283156200339f57859160009462003457575b50600654169160246040518094819382523060048301525afa9384156200339f57600094620033685750509190565b9182819592953d831162003487575b620034728183620023fc565b81010312620004cf5750849051923862003428565b503d62003466565b908015620034bb57620f424091828102928184041490151715620025c057620034b8916200258b565b90565b50506207a12090565b9060030b600719808203620034d857505090565b8082121562003514570390637fffffff198212637fffffff831317620025c0576200350d620034b89263ffffffff166200354a565b906200258b565b5060080190637fffffff198212637fffffff831317620025c05762003543620034b89263ffffffff166200354a565b90620025ac565b600190816000815b6200355e575b50505090565b90919263ffffffff8085169083161015620035a357600a90818102918183041490151715620025c0579263ffffffff809216918214620025c057919081018162003552565b926200355856fe60406080815234620003d65762000d86803803806200001e81620003db565b9283398101608082820312620003d65781516001600160401b039290838111620003d657826200005091830162000401565b906020928382015190858211620003d6576200006e91830162000401565b8186015190926001600160a01b038216929091839003620003d65760600151948151818111620002d6576003908154906001948583811c93168015620003cb575b89841014620003b5578190601f938481116200035f575b508990848311600114620002f857600092620002ec575b505060001982851b1c191690851b1782555b8551928311620002d65760049586548581811c91168015620002cb575b89821014620002b6578281116200026b575b50879184116001146200020057938394918492600095620001f4575b50501b92600019911b1c19161782555b60018060a01b03193381600554161760055560065416176006553315620001dd5760025490838201809211620001c857506000917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9160025533835282815284832084815401905584519384523393a3516109129081620004748239f35b601190634e487b7160e01b6000525260246000fd5b602490600085519163ec442f0560e01b8352820152fd5b0151935038806200013a565b9190601f198416928760005284896000209460005b8b8983831062000253575050501062000238575b50505050811b0182556200014a565b01519060f884600019921b161c191690553880808062000229565b86860151895590970196948501948893500162000215565b87600052886000208380870160051c8201928b8810620002ac575b0160051c019086905b8281106200029f5750506200011e565b600081550186906200028f565b9250819262000286565b602288634e487b7160e01b6000525260246000fd5b90607f16906200010c565b634e487b7160e01b600052604160045260246000fd5b015190503880620000dd565b90879350601f19831691866000528b6000209260005b8d8282106200034857505084116200032f575b505050811b018255620000ef565b015160001983871b60f8161c1916905538808062000321565b8385015186558b979095019493840193016200030e565b90915084600052896000208480850160051c8201928c8610620003ab575b918991869594930160051c01915b8281106200039b575050620000c6565b600081558594508991016200038b565b925081926200037d565b634e487b7160e01b600052602260045260246000fd5b92607f1692620000af565b600080fd5b6040519190601f01601f191682016001600160401b03811183821017620002d657604052565b919080601f84011215620003d65782516001600160401b038111620002d65760209062000437601f8201601f19168301620003db565b92818452828287010111620003d65760005b8181106200045f57508260009394955001015290565b85810183015184820184015282016200044956fe608060408181526004918236101561001657600080fd5b600092833560e01c91826306fdde03146106ac57508163095ea7b31461060257816318160ddd146105e357816323b872dd146104d0578163313ce567146104b457816340c10f19146103ec5781635b8bec55146103c357816370a082311461038c57816395d89b411461026d5781639dc29fac1461017d578163a9059cbb1461012757508063dd62ed3e146100df5763def114b6146100b457600080fd5b346100db57816003193601126100db5760055490516001600160a01b039091168152602090f35b5080fd5b50346100db57806003193601126100db57806020926100fc6107cd565b6101046107e8565b6001600160a01b0391821683526001865283832091168252845220549051908152f35b82843461017a578160031936011261017a57506101426107cd565b9160018060a01b0360065416331461016c575061016560209260243590336107fe565b5160018152f35b905163ec0511b360e01b8152fd5b80fd5b839150346100db57826003193601126100db576101986107cd565b6005549091602435916001600160a01b03908116330361025e578316928315610247578385528460205285852054918383106102135750508184957fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef936020938688528785520381872055816002540360025551908152a380f35b865163391434e360e21b81526001600160a01b03909216908201908152602081018390526040810184905281906060010390fd5b8551634b637e8f60e11b8152808301869052602490fd5b508451631e29ea2960e11b8152fd5b8383346100db57816003193601126100db57805190828454600181811c90808316928315610382575b602093848410811461036f5783885290811561035357506001146102fe575b505050829003601f01601f191682019267ffffffffffffffff8411838510176102eb57508291826102e7925282610784565b0390f35b634e487b7160e01b815260418552602490fd5b8787529192508591837f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b83851061033f57505050508301018580806102b5565b805488860183015293019284908201610329565b60ff1916878501525050151560051b84010190508580806102b5565b634e487b7160e01b895260228a52602489fd5b91607f1691610296565b5050346100db5760203660031901126100db5760209181906001600160a01b036103b46107cd565b16815280845220549051908152f35b5050346100db57816003193601126100db5760065490516001600160a01b039091168152602090f35b919050346104b057806003193601126104b0576104076107cd565b60055460243592916001600160a01b0391821633036104a0571692831561048b5760025490838201809211610478575084927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9260209260025585855284835280852082815401905551908152a380f35b634e487b7160e01b865260119052602485fd5b84602492519163ec442f0560e01b8352820152fd5b825163294c9fd360e01b81528590fd5b8280fd5b5050346100db57816003193601126100db576020905160068152f35b9050823461017a57606036600319011261017a576104ec6107cd565b6104f46107e8565b60065460443594919391906001600160a01b03848116911681146105d457808352600160205286832033845260205286832054916000198303610540575b6020886101658989896107fe565b8683106105a857811561059157331561057a5750825260016020908152868320338452815291869020908590039055829061016587610532565b8751634a1406b160e11b8152908101849052602490fd5b875163e602df0560e01b8152908101849052602490fd5b8751637dc7a0d960e11b8152339181019182526020820193909352604081018790528291506060010390fd5b50855163ec0511b360e01b8152fd5b5050346100db57816003193601126100db576020906002549051908152f35b9050346104b057816003193601126104b05761061c6107cd565b602435903315610695576001600160a01b031691821561067e57508083602095338152600187528181208582528752205582519081527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925843392a35160018152f35b8351634a1406b160e11b8152908101859052602490fd5b835163e602df0560e01b8152808401869052602490fd5b849084346104b057826003193601126104b05782600354600181811c9080831692831561077a575b602093848410811461036f57838852908115610353575060011461072457505050829003601f01601f191682019267ffffffffffffffff8411838510176102eb57508291826102e7925282610784565b600387529192508591837fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b5b83851061076657505050508301018580806102b5565b805488860183015293019284908201610750565b91607f16916106d4565b6020808252825181830181905290939260005b8281106107b957505060409293506000838284010152601f8019910116010190565b818101860151848201604001528501610797565b600435906001600160a01b03821682036107e357565b600080fd5b602435906001600160a01b03821682036107e357565b916001600160a01b038084169283156108c357169283156108aa5760009083825281602052604082205490838210610878575091604082827fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef958760209652828652038282205586815220818154019055604051908152a3565b60405163391434e360e21b81526001600160a01b03919091166004820152602481019190915260448101839052606490fd5b60405163ec442f0560e01b815260006004820152602490fd5b604051634b637e8f60e11b815260006004820152602490fdfea26469706673582212203672f4cd9b1754d205280219cc0fec549867232c19c11c6bdbee5f30f8290b8264736f6c63430008140033a26469706673582212209c778d28b97a9e05e3e0dadf30133da5ba249f700c9ac5f359e14b39a68eadbc64736f6c63430008140033a2646970667358221220c90ffbb09550078e6b3b26301a89918a068296ba94ee3667d9c2ee2482f07a5a64736f6c63430008140033",
  "deployedBytecode": "0x60806040818152600491823610156200001757600080fd5b600090813560e01c9081624fbbb014620009ea575080632d80caa51462000760578063715018a614620007025780638da5cb5b14620006d85780638e0596a214620006b7578063a6cb421814620005bc578063c285f8531462000505578063d52b8198146200018d578063f2fde38b14620000fb5763f6c33179146200009c57600080fd5b34620000f85781600319360112620000f857620000b862000a1c565b6001600160a01b0316815260209290925280822080546024359390841015620000f85750602092620000ea9162000af8565b91905490519160031b1c8152f35b80fd5b5091346200018957602036600319011262000189576200011a62000a1c565b906200012562000b27565b6001600160a01b039182169283156200017357505082546001600160a01b0319811683178455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b51631e4fbdf760e01b8152908101849052602490fd5b8280fd5b509034620005015760e0366003190112620005015767ffffffffffffffff928035848111620004eb57620001c5903690830162000aab565b6024938435926002841015620005015784604319360112620005015784519285840184811089821117620004ef5786526044358452606435978860030b8903620004eb576020988986019081526084359660a435838111620004e75762000230903690870162000aab565b60c43592428a1115620004af57428a038a81116200049d576202a300106200044c578315620003f857620002648662000ba0565b8b519661495280890197881189891017620003e657928f92620002b18f9361012097948c9b9a9996620002e1988d62000dab9039338c5230908c015261014080918c01528a019062000b79565b93606089015260808801528b5160a08801525160030b60c08701528b60e087015285820361010087015262000b79565b920152039083f0958615620003dc576002549660018801809811620003ca578760025560018060a01b031696835260038852858320876bffffffffffffffffffffffff60a01b825416179055338352818852858320906002549382549368010000000000000000851015620003ba5750505090620003659160018201815562000af8565b819291549060031b91821b91600019901b1916179055600254905183519285845286840152838301527f7bed24594bc69eabc466d2e497d2f8ec45df38dea10026d0c4e0b31cb0a9b9c660603393a351908152f35b634e487b7160e01b825260419052fd5b50634e487b7160e01b83526011825282fd5b85513d84823e3d90fd5b634e487b7160e01b8b5260418a528e8bfd5b50895162461bcd60e51b81528087018d90526028818d01527f496e697469616c206c6971756964697479206d75737420626520677265617465604482015267072207468616e20360c41b6064820152608490fd5b50895162461bcd60e51b81528087018d90526025818d01527f456e64206d757374206265206c657373207468616e203220646179732066726f6044820152646d206e6f7760d81b6064820152608490fd5b634e487b7160e01b8952601188528c89fd5b50895162461bcd60e51b81528087018d90526012818d015271456e64206d7573742062652066757475726560701b6044820152606490fd5b8680fd5b8380fd5b634e487b7160e01b8452604183528784fd5b5080fd5b50829034620000f8576020918260031936011262000501579192916001600160a01b036200053262000a1c565b1682528352818120908251808584549182815201908194845286842090845b818110620005a757505050816200056a91038262000a6b565b83519485948186019282875251809352850193925b8281106200058f57505050500390f35b8351855286955093810193928101926001016200057f565b82548452928801926001928301920162000551565b50829034620000f8576020928360031936011262000501578235825260038452808220546001600160a01b03168015620006875790848493928251948580926327793f8760e01b82525afa9283156200067c5782936200063d575b50519260038310156200062a5750508152f35b634e487b7160e01b825260219052602490fd5b9092508481813d831162000674575b62000658818362000a6b565b8101031262000501575160038110156200050157918562000617565b503d6200064c565b5051903d90823e3d90fd5b815162461bcd60e51b8152808501869052600a602482015269125b9d985b1a59081a5960b21b6044820152606490fd5b50903462000501578160031936011262000501576020906002549051908152f35b5090346200050157816003193601126200050157905490516001600160a01b039091168152602090f35b5034620000f85780600319360112620000f8576200071f62000b27565b80546001600160a01b03198116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b50919034620001895760209081600319360112620004eb576200078262000a1c565b6200078c62000b27565b600260015414620009da5760026001556001600160a01b03908116806200086c5750479081156200083b578580809381938254165af13d1562000835573d620007d58162000a8e565b90620007e48451928362000a6b565b815285843d92013e5b15620007fe575050505b6001805580f35b5162461bcd60e51b8152918201526013602482015272115512081dda5d1a191c985dc819985a5b1959606a1b604482015260649150fd5b620007ed565b50505162461bcd60e51b815291820152600b60248201526a4e6f20455448206665657360a81b604482015260649150fd5b82516370a0823160e01b8152308682015290918482602481865afa918215620009d05787926200099b575b50811562000968579060448592885416888651958694859363a9059cbb60e01b85528b85015260248401525af19081156200095e5785916200091d575b5015620008e457505050620007f7565b5162461bcd60e51b8152918201526015602482015274151bdad95b881dda5d1a191c985dc819985a5b1959605a1b604482015260649150fd5b90508281813d831162000956575b62000937818362000a6b565b810103126200095257518015158103620009525738620008d4565b8480fd5b503d6200092b565b82513d87823e3d90fd5b835162461bcd60e51b8152808701869052600d60248201526c4e6f20746f6b656e206665657360981b6044820152606490fd5b9091508481813d8311620009c8575b620009b6818362000a6b565b81010312620004e75751903862000897565b503d620009aa565b84513d89823e3d90fd5b8151633ee5aeb560e01b81528490fd5b929050346200050157602036600319011262000501579235815260036020908152929020546001600160a01b03168152f35b600435906001600160a01b038216820362000a3357565b600080fd5b6040810190811067ffffffffffffffff82111762000a5557604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff82111762000a5557604052565b67ffffffffffffffff811162000a5557601f01601f191660200190565b81601f8201121562000a335780359062000ac58262000a8e565b9262000ad5604051948562000a6b565b8284526020838301011162000a3357816000926020809301838601378301015290565b805482101562000b115760005260206000200190600090565b634e487b7160e01b600052603260045260246000fd5b6000546001600160a01b0316330362000b3c57565b60405163118cdaa760e01b8152336004820152602490fd5b60005b83811062000b685750506000910152565b818101518382015260200162000b57565b9060209162000b948151809281855285808601910162000b54565b601f01601f1916010190565b604080519160209262000bd284828162000bc4818301968781519384920162000b54565b810103808452018262000a6b565b519020815183810190670c525390d21554d160c21b82526008815262000bf88162000a38565b519020811462000d835781518381019066105055915554d160ca1b82526007815262000c248162000a38565b519020811462000d5c578151838101906910925510d3d2539554d160b21b8252600a815262000c538162000a38565b519020811462000d3557815183810190651093909554d160d21b82526006815262000c7e8162000a38565b519020811462000d0e57815183810190651155121554d160d21b82526006815262000ca98162000a38565b5190201462000ce85760649250519062461bcd60e51b82526004820152601060248201526f2ab739bab83837b93a32b2103830b4b960811b6044820152fd5b50507fff61491a931112ddf1bd8147cd1b641375f79f5825126d665480874634fd0ace90565b5050507f2f95862b045670cd22bee3114c39763a4a08beeb663b145d283c31d7d1101c4f90565b5050507fc5e0e0c92116c0c070a242b254270441a6201af680a33e0381561c59db3266c990565b5050507f2b9ab1e972a281585084148ba1389800799bd4be63b957507db1349314e4744590565b5050507f63f341689d98a12ef60a5cff1d7f85c70a9e17bf1575f0e7c0b2512d48b1c8b39056fe604060c0815234620005395762004952803803806200001e816200053e565b928339810190808203610140811262000539576200003c8262000564565b9060206200004c81850162000564565b868501519094906001600160401b0381116200053957866200007091830162000579565b60608201516002811015620005395788608084015195609f1901126200053957885197888a016001600160401b0381118a82101762000433578a5260a0840151895260c08401518060030b810362000539578986015260e08401516101008501519091906001600160401b038111620005395761012091620000f491870162000579565b940151986001600160a01b038816156200052157600080546001600160a01b031981166001600160a01b038b81169182178455899493919216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a3600197888055612710600255610a3261ffff19600354161760035560ff60a01b196007541660075573cac524bca292aaade2df8a05cc58f0a65b1b3bb960805273dd24f84d36bf92c65f92307595335bdfab5bbd2160a052600d558051600e55015163ffffffff19600f54169063ffffffff1617600f55600a55825160018060401b0381116200043357600b54938685811c9516801562000516575b8686101462000412578190601f95868111620004bf575b508690868311600114620004555760009262000449575b5050600019600383901b1c191690861b17600b555b4260095560ff8019600c5416911617600c5580519260018060401b03841162000433576010548581811c9116801562000428575b828210146200041257838111620003c6575b50809284116001146200035957509282939183926000946200034d575b50501b916000199060031b1c1916176010555b6008805461ffff60a01b1916600160a91b179055601280546001600160a01b03199081166001600160a01b03938416179091556011805490911692909116919091179055600455516143669081620005ec823960805181818161057e01528181610c83015281816110c70152818161151c015281816116bc0152818161173f01528181611b620152611e7f015260a0518181816112e1015281816128680152612bfc0152f35b01519250388062000294565b919083601f198116601060005284600020946000905b88838310620003ab575050501062000391575b505050811b01601055620002a7565b015160001960f88460031b161c1916905538808062000382565b8587015188559096019594850194879350908101906200036f565b6010600052816000208480870160051c82019284881062000408575b0160051c019086905b828110620003fb57505062000277565b60008155018690620003eb565b92508192620003e2565b634e487b7160e01b600052602260045260246000fd5b90607f169062000265565b634e487b7160e01b600052604160045260246000fd5b0151905038806200021c565b90889350601f19831691600b600052886000209260005b8a828210620004a857505084116200048e575b505050811b01600b5562000231565b015160001960f88460031b161c191690553880806200047f565b8385015186558c979095019493840193016200046c565b909150600b600052866000208680850160051c8201928986106200050c575b918a91869594930160051c01915b828110620004fc57505062000205565b600081558594508a9101620004ec565b92508192620004de565b94607f1694620001ee565b8a51631e4fbdf760e01b815260006004820152602490fd5b600080fd5b6040519190601f01601f191682016001600160401b038111838210176200043357604052565b51906001600160a01b03821682036200053957565b919080601f84011215620005395782516001600160401b0381116200043357602090620005af601f8201601f191683016200053e565b92818452828287010111620005395760005b818110620005d757508260009394955001015290565b8581018301518482018401528201620005c156fe60806040818152600490813610156200001757600080fd5b600092833560e01c90816302d05d3f14620023735750806303ee438c14620022a75780630dd919d2146200225e57806311a9f10a1462002233578063190bfcd014620022125780631ca9b43514620021f1578063200d2ed214620021be57806327793f8714620021905780633197cbb6146200216f578063336fe2c91462001e16578063361bc1b51462001deb578063386b166e1462001dc457806340794c3b1462001cb457806346e777821462001c905780634c5b59a51462001a4e57806351c6590a14620016eb57806351ed6a3014620016a557806357fa6030146200168e5780635c3c107e1462001665578063645539ed146200162257806365e23abc1462001426578063715018a614620013c857806378e9792514620013a75780638197e7cd14620013105780638afffea514620012ca5780638da5cb5b14620012a05780639c8f9f231462000f54578063a8512a0a1462000f2c578063adc6013e1462000b27578063b886f6c714620009ec578063bb9c57fa14620009cb578063c3cca65e14620009aa578063c45a0155146200097f578063cc7e7c2014620008e4578063d44cd8dd146200051b578063d612527114620004d2578063dc38679c14620004a5578063e736e3f71462000485578063eb0c085614620002db578063f0d9bb2014620002ac5763f2fde38b146200021157600080fd5b34620002a8576020366003190112620002a8576001600160a01b03823581811693919290849003620002a457620002476200255e565b83156200028e575050600054826001600160601b0360a01b821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a380f35b51631e4fbdf760e01b8152908101849052602490fd5b8480fd5b8280fd5b838234620002d75781600319360112620002d75760065490516001600160a01b039091168152602090f35b5080fd5b5034620002a85782600319360112620002a857620002f86200255e565b60ff60085460a01c1660078110156200047257801515908162000465575b5062000458576200032c8254600254906200258b565b90620f424091828102928184041490151715620004455760125481516001600160a01b03939091841690610d86808401906001600160401b03821185831017620004325784939291606091620035ab86396080808252600290820152614e4f60f01b60a0820152620003b960c08201828103602084015260409060028152614e4f60f01b60208201520190565b93878201520152039085f0908115620004295750166001600160601b0360a01b600754161760075560ff60085460a01c169060078210156200041657506200040a57620004076001620025d6565b80f35b620004076002620025d6565b634e487b7160e01b835260219052602482fd5b513d85823e3d90fd5b634e487b7160e01b895260418852602489fd5b634e487b7160e01b845260118352602484fd5b5163cf5ba7b960e01b8152fd5b6001915014153862000316565b634e487b7160e01b845260218352602484fd5b509034620002a85782600319360112620002a85760209250549051908152f35b508234620004cf5780600319360112620004cf5750600e54600f5460030b82519182526020820152f35b80fd5b6101208262000519620004f0620004e936620024ae565b906200283e565b91805192805184526200050c60208201516020860190620024ff565b015160a0830190620024ff565bf35b509034620002a8576200052e3662002469565b909260ff60075460a01c16620008d55784546001600160a01b03939084163314620008c7578215620008b95762000566838662003194565b82516370a0823160e01b8152338382015290946020917f00000000000000000000000000000000000000000000000000000000000000008216908381602481855afa90811562000836579088918b9162000882575b501062000840578451636eb1769f60e11b8152338582019081523060208201528490829081906040010381855afa90811562000836579088918b91620007fa575b5010620007b85784516323b872dd60e01b815233858201908152306020820152604081018990529091849183919082908d90829060600103925af1908115620007ae5789916200078c575b50156200075357600387101562000740578188918815600014620007355780600654165b865163a9059cbb60e01b815233878201908152602081018a905290948593849283906040010393165af19182156200072b578892620006f7575b505015620006e9575090620006e37f78408fb808ae2018d121a91ae47221eb4b85530dc14522ce2ddcb93083e269d693925192839233968462003175565b0390a280f35b90516318161dad60e21b8152fd5b6200071b9250803d1062000723575b620007128183620023fc565b81019062002645565b3880620006a5565b503d62000706565b84513d8a823e3d90fd5b80600754166200066b565b634e487b7160e01b885260218352602488fd5b50606492519162461bcd60e51b8352820152601560248201527414165554d1081d1c985b9cd9995c8819985a5b1959605a1b6044820152fd5b620007a79150833d85116200072357620007128183620023fc565b3862000647565b85513d8b823e3d90fd5b5050606492519162461bcd60e51b8352820152601c60248201527f496e73756666696369656e7420505955534420616c6c6f77616e6365000000006044820152fd5b809250858092503d83116200082e575b620008168183620023fc565b81010312620008295787905138620005fc565b600080fd5b503d6200080a565b86513d8c823e3d90fd5b5050606492519162461bcd60e51b8352820152601a60248201527f496e73756666696369656e742050595553442062616c616e63650000000000006044820152fd5b809250858092503d8311620008b1575b6200089e8183620023fc565b81010312620008295787905138620005bb565b503d62000892565b9051632688641b60e21b8152fd5b905163086b2ac360e41b8152fd5b516378e34bb960e01b81529050fd5b508234620004cf5780600319360112620004cf57506018546200097b8251926200090e84620023c4565b601954908160070b85526001600160401b03918281831c16602087015260801c60030b81860152601a5460608601528051916200094b83620023c4565b601b54908160070b845281831c16602084015260801c60030b81830152601c546060830152519384938462002531565b0390f35b838234620002d75781600319360112620002d75760115490516001600160a01b039091168152602090f35b838234620002d75781600319360112620002d7576020906005549051908152f35b838234620002d75781600319360112620002d757602090600d549051908152f35b5034620002a85782600319360112620002a85762000a096200255e565b60ff60085460a01c1660078110156200047257801515908162000b1a575b50620004585762000a3d8254600254906200258b565b90620f424091828102928184041490151715620004455760125481516001600160a01b03939091841690610d86808401906001600160401b03821185831017620004325784939291606091620035ab863960808082526003908201526259455360e81b60a082015262000acc60c082018281036020840152604090600381526259455360e81b60208201520190565b93878201520152039085f0908115620004295750166001600160601b0360a01b600654161760065560ff60085460a01c169060078210156200041657506200040a57620004076001620025d6565b6001915014153862000a27565b509034620002a85762000b3a3662002469565b600754919260a083901c60ff1662000f1e5785546001600160a01b0393908416331462000f0f57821562000f0057600385101562000eed5783908562000ee5575080600654165b16928551916370a0823160e01b808452338285015260209384816024818a5afa801562000e2c5786918b9162000eae575b501062000e3657508651636eb1769f60e11b8082523383830190815230602082015290919085908290819060400103818a5afa801562000e2c5786918b9162000df5575b501062000d5e575062000c0a84876200325e565b87516323b872dd60e01b81523383820190815230602082015260408101879052919690918591839182908d90829060600103925af190811562000d5457899162000d32575b501562000d2457865163a9059cbb60e01b8152339181019182526020820186905291839183919082908b90829060400103927f0000000000000000000000000000000000000000000000000000000000000000165af191821562000d1a57620006e3927fdb6c1cc84b96330a9be015b7f4d49df42a035945bf4bc3423e48a6e4259dbb7b96979262000ceb928a9262000cf8575b50506200265f565b5192839233968462003175565b62000d129250803d106200072357620007128183620023fc565b388062000ce3565b86513d89823e3d90fd5b86516318161dad60e21b8152fd5b62000d4d9150843d86116200072357620007128183620023fc565b3862000c4f565b88513d8b823e3d90fd5b875190815233828201908152306020820152909190899086908a90879081908790819003604001818d5afa93841562000dea579362000db3575b50516377594e6960e01b815292830152602482015260449150fd5b90925084813d831162000de2575b62000dcd8183620023fc565b81010312620008295760449351918562000d98565b503d62000dc1565b8251903d90823e3d90fd5b809250868092503d831162000e24575b62000e118183620023fc565b8101031262000829578590513862000bf6565b503d62000e05565b89513d8c823e3d90fd5b87519081523381830152908885898680866024818d5afa93841562000dea579362000e77575b505163053ab6d560e21b815292830152602482015260449150fd5b90925084813d831162000ea6575b62000e918183620023fc565b81010312620008295760449351918562000e5c565b503d62000e85565b809250868092503d831162000edd575b62000eca8183620023fc565b8101031262000829578590513862000bb2565b503d62000ebe565b811662000b81565b634e487b7160e01b875260218252602487fd5b508451632688641b60e21b8152fd5b50845163086b2ac360e41b8152fd5b84516378e34bb960e01b8152fd5b838234620002d75760209062000f4d62000f463662002469565b906200325e565b9051908152f35b5034620002a857602090816003193601126200129c5782359162000f776200255e565b6007549060ff8260a01c166200128c5762000f95600254856200258b565b91620f424092838102938185041490151715620012795760065484516370a0823160e01b80825230898301526001600160a01b03939284169290918581602481875afa908b82156200126e5787928794928a929162001233575b5010938415620011bb575b505050506200119d57879062001012878954620026ac565b8855803b15620002d7578551632770a7eb60e21b80825230828b01908152602081018890529092849183919082908490829060400103925af1801562001193579083916200117b575b50508260075416803b15620002a857865191825230828a01908152602081018790528391839182908490829060400103925af18015620011715762001155575b50845163a9059cbb60e01b815233978101978852602088018790529683928892918390036040019183917f0000000000000000000000000000000000000000000000000000000000000000165af19485156200114b577f96cd817c6329656790ef8fba7675405193677d39619571282f5e21f3a98cd059949562001129575b5082519485528401523392a280f35b6200114390823d84116200072357620007128183620023fc565b50386200111a565b83513d88823e3d90fd5b62001160906200239a565b6200116d5786386200109b565b8680fd5b86513d84823e3d90fd5b62001186906200239a565b620002d75781386200105b565b87513d85823e3d90fd5b845163a4d71b8160e01b815260008189015260248101859052604490fd5b8951908152308c8201529350909183916024918391165afa90811562001229579085918a91620011f2575b50108284388062000ffa565b809250858092503d831162001221575b6200120e8183620023fc565b81010312620008295784905138620011e6565b503d62001202565b86513d8b823e3d90fd5b93929450505081813d831162001266575b620012508183620023fc565b8101031262000829578491878792513862000fef565b503d62001244565b8951903d90823e3d90fd5b634e487b7160e01b875260118652602487fd5b82516378e34bb960e01b81528590fd5b8380fd5b838234620002d75781600319360112620002d757905490516001600160a01b039091168152602090f35b838234620002d75781600319360112620002d757517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b508234620004cf5780600319360112620004cf57506013546200097b8251926200133a84620023c4565b601454908160070b85526001600160401b03918281831c16602087015260801c60030b8186015260155460608601528051916200137783620023c4565b601654908160070b845281831c16602084015260801c60030b818301526017546060830152519384938462002531565b838234620002d75781600319360112620002d7576020906009549051908152f35b8334620004cf5780600319360112620004cf57620013e56200255e565b600080546001600160a01b0319811682556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b5034620002a85782600319360112620002a857620014436200255e565b60ff60075460a01c1615620016155760085481516370a0823160e01b81523084820152602094909390916001600160a01b03919082168686602481845afa958615620015d6578496620015e0575b50620f4240620014a460025488620025ac565b0495813b15620002a4578551632770a7eb60e21b8152308185019081526020810192909252939291859185919082908490829060400103925af18015620015d657918691858994620015b6575b875163a9059cbb60e01b815233928101928352602083019490945292945084928391829060400103927f0000000000000000000000000000000000000000000000000000000000000000165af1918215620015ab5790620015599262001589575b506200265f565b80518281527f316a0bcd9820c43f9ba8738fd680d536a8ac65080f56f96833f696f6dd5a12fd843392a251908152f35b620015a49150853d87116200072357620007128183620023fc565b3862001552565b8351903d90823e3d90fd5b9250925092620015c6906200239a565b620002a8578482879285620014f1565b85513d86823e3d90fd5b9095508681813d83116200160d575b620015fb8183620023fc565b81010312620008295751943862001491565b503d620015ef565b51635fd4000d60e11b8152fd5b50829034620002d75781600319360112620002d75760ff600c541690519160028210156200165257602083838152f35b634e487b7160e01b815260218452602490fd5b838234620002d75781600319360112620002d75760209060ff60075460a01c1690519015158152f35b83620004076200169e36620024ae565b9062002b2e565b838234620002d75781600319360112620002d757517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b5034620002a857602090816003193601126200129c578235926200170e6200255e565b60ff60075460a01c1662001a40578315620008b95781516370a0823160e01b815233828201526001600160a01b03907f00000000000000000000000000000000000000000000000000000000000000008216908581602481855afa908115620019c557908791899162001a09575b5010620019cf578351636eb1769f60e11b8152338482019081523060208201528690829081906040010381855afa8015620019c557879089906200198d575b620017c992501015620025ff565b83516323b872dd60e01b815233848201908152306020820152604081018890529091869183919082908b90829060600103925af1908115620019835790620018199188916200196857506200265f565b62001827600254866200258b565b91620f424092838102938185041490151715620019555790816200184e878994546200269e565b8155816006541691823b156200129c5785516340c10f1960e01b80825230848301908152602081018890529094869183919082908490829060400103925af180156200194b5790859162001933575b50506007541691823b156200129c578551908152309181019182526020820185905291839183919082908490829060400103925af18015620019295762001911575b50507fac1d76749e5447b7b16f5ab61447e1bd502f3bb4807af3b28e620d1700a6ee459282519485528401523392a280f35b6200191c906200239a565b620002a4578438620018df565b84513d84823e3d90fd5b6200193e906200239a565b6200129c5783386200189d565b87513d87823e3d90fd5b634e487b7160e01b875260119052602486fd5b620015a49150863d88116200072357620007128183620023fc565b84513d89823e3d90fd5b50508581813d8311620019bd575b620019a78183620023fc565b81010312620008295786620017c99151620017bb565b503d6200199b565b85513d8a823e3d90fd5b835162461bcd60e51b81528084018690526014602482015273496e73756666696369656e742062616c616e636560601b6044820152606490fd5b809250878092503d831162001a38575b62001a258183620023fc565b810103126200082957869051386200177c565b503d62001a19565b90516378e34bb960e01b8152fd5b50829034620002d75760209081600319360112620002a85783359160ff60075460a01c161562001c805783546001600160a01b0391908216331462001c7057831562001c605781600854169183516370a0823160e01b815233888201528281602481875afa90811562001c0f57908691889162001c29575b501062001c1957620f424062001adf60025487620025ac565b049262001aee848954620026ac565b8855803b156200116d578451632770a7eb60e21b815233818a01908152602081018890529091889183919082908490829060400103925af1801562001c0f5762001bf2575b50835163a9059cbb60e01b8152339781019788526020880184905295968291879182908a9082906040015b03927f0000000000000000000000000000000000000000000000000000000000000000165af19485156200114b577faeb4b315a6442ab135da41b9b7b337c712b68e5a6051ef6299965f3e58dbebbb949562001bc291889162001bd057506200265f565b82519485528401523392a280f35b62001beb9150833d85116200072357620007128183620023fc565b8862001552565b829162001b5e9762001c0586936200239a565b9750915062001b33565b85513d89823e3d90fd5b83516328f48e2f60e01b81528790fd5b809250848092503d831162001c58575b62001c458183620023fc565b810103126200116d578590518962001ac6565b503d62001c39565b8251632688641b60e21b81528690fd5b825163086b2ac360e41b81528690fd5b8151635fd4000d60e11b81528590fd5b838234620002d75781600319360112620002d75760209060ff600354169051908152f35b5034620002a85782600319360112620002a857805191836010549060019082821c92828116801562001db9575b602095868610821462001da6575084885290811562001d81575060011462001d23575b6200097b868662001d18828b0383620023fc565b51918291826200241e565b929550601083527f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae6725b82841062001d6d57505050826200097b9462001d1892820101943862001d04565b805486850188015292860192810162001d4c565b60ff191687860152505050151560051b830101925062001d18826200097b3862001d04565b634e487b7160e01b845260229052602483fd5b93607f169362001ce1565b838234620002d75781600319360112620002d75760209060ff60035460081c169051908152f35b838234620002d75781600319360112620002d75760085490516001600160a01b039091168152602090f35b5034620002a85782600319360112620002a85762001e336200255e565b60ff60085460a01c166007811015620004725760020362002162576012548151636eb1769f60e11b81526001600160a01b039182168185018181523060208281019190915293959394927f000000000000000000000000000000000000000000000000000000000000000087169290918690839081906040010381865afa9182156200072b5790869291899262002124575b509262001f189362001edc875480941015620025ff565b85516323b872dd60e01b81526001600160a01b03909116878201908152306020820152604081019390935293849283918b918391606090910190565b03925af19081156200211a579062001f389187916200158957506200265f565b62001f488254600254906200258b565b620f424090818102918183041490151715620021075760035460ff81169162001f8560ff62001f788584620025ac565b9360081c168093620025ac565b928360011b9380850460021490151715620020f45760640360ff8111620020f45762001fc1929160ff62001fbb921690620025ac565b620025ac565b948560011b9580870460021490151715620020e157806006541695878260125416878651809a8185816200201e8d63a9059cbb60e01b98898452612710809e0491840160209093929193604081019460018060a01b031681520152565b03925af19889156200117157889998969798620020bf575b50600754601254885192835285166001600160a01b0316988201988952949092046020880152909586939084900360400192849291165af19081156200042957506200209c575b8260ff60a01b19600360a01b8160085416176008556007541660075580f35b81620020b692903d106200072357620007128183620023fc565b5038806200207d565b620020d990873d89116200072357620007128183620023fc565b503862002036565b634e487b7160e01b875260118452602487fd5b634e487b7160e01b895260118652602489fd5b634e487b7160e01b865260118352602486fd5b82513d88823e3d90fd5b8381949293503d83116200215a575b6200213f8183620023fc565b8101031262002156579051859162001f1862001ec5565b8780fd5b503d62002133565b51637ca6958160e01b8152fd5b838234620002d75781600319360112620002d757602090600a549051908152f35b838234620002d75781600319360112620002d7576020906200051960ff60085460a81c16915180926200248a565b50829034620002d75781600319360112620002d75760ff60085460a01c1690519160078210156200165257602083838152f35b838234620002d75760209062000f4d6200220b3662002469565b9062003194565b838234620002d75781600319360112620002d7576020906002549051908152f35b838234620002d75781600319360112620002d75760075490516001600160a01b039091168152602090f35b838234620002d75781600319360112620002d757608090601d5490601e54908051928060070b84526001600160401b0381831c166020850152841c60030b908301526060820152f35b5034620002a85782600319360112620002a85780519183600b549060019082821c92828116801562002368575b602095868610821462001da6575084885290811562001d8157506001146200230a576200097b868662001d18828b0383620023fc565b929550600b83527f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db95b8284106200235457505050826200097b9462001d1892820101943862001d04565b805486850188015292860192810162002333565b93607f1693620022d4565b849034620002d75781600319360112620002d7576012546001600160a01b03168152602090f35b6001600160401b038111620023ae57604052565b634e487b7160e01b600052604160045260246000fd5b608081019081106001600160401b03821117620023ae57604052565b606081019081106001600160401b03821117620023ae57604052565b90601f801991011681019081106001600160401b03821117620023ae57604052565b6020808252825181830181905290939260005b8281106200245457505060409293506000838284010152601f8019910116010190565b81810186015184820160400152850162002431565b60409060031901126200082957600435600381101562000829579060243590565b906003821015620024985752565b634e487b7160e01b600052602160045260246000fd5b90602060031983011262000829576004356001600160401b039283821162000829578060238301121562000829578160040135938411620008295760248460051b8301011162000829576024019190565b60608091805160070b84526001600160401b036020820151166020850152604081015160030b60408501520151910152565b60a090620025546200255c949695939661012083019783526020830190620024ff565b0190620024ff565b565b6000546001600160a01b031633036200257357565b60405163118cdaa760e01b8152336004820152602490fd5b811562002596570490565b634e487b7160e01b600052601260045260246000fd5b81810292918115918404141715620025c057565b634e487b7160e01b600052601160045260246000fd5b600781101562002498576008805460ff60a01b191660a09290921b60ff60a01b16919091179055565b156200260757565b60405162461bcd60e51b8152602060048201526016602482015275496e73756666696369656e7420616c6c6f77616e636560501b6044820152606490fd5b908160209103126200082957518015158103620008295790565b156200266757565b60405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b6044820152606490fd5b91908201809211620025c057565b91908203918211620025c057565b60405190620026c982620023c4565b60006060838281528260208201528260408201520152565b60405190620026f082620023e0565b8160008152620026ff620026ba565b6020820152604062002710620026ba565b910152565b8183526020600583901b84018101939192906000818401855b84831062002740575050505050505090565b90919293949596601f19808883030184528835601e19843603018112156200082957830186810190356001600160401b038111620008295780360382136200082957838893601f83808796879660019a52868601376000858286010152011601019901930193019195949392906200272e565b805115620027c15760200190565b634e487b7160e01b600052603260045260246000fd5b91908260809103126200082957604051620027f281620023c4565b809280518060070b81036200082957825260208101516001600160401b03811681036200082957602083015260408101518060030b810362000829576040830152606090810151910152565b62002848620026e1565b506040805163d47eed4560e01b81526020600482018190529193919291907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690848180620028a460248201878962002715565b0381855afa90811562002b235760009162002af0575b5080341062002ab75785516001600160401b039481880186811183821017620023ae578895939291955260018082528782019188368437600d54620028ff82620027b3565b5287600954169088600a54169262002916620026e1565b508a6200293d8d519a8b99634716e9c560e01b8b52608060048c015260848b019162002715565b8881036003190160248a015292518084529201949160005b8c82821062002aa05750505050508492600096949284926044840152606483015203925af192831562002a95576000936200299e575b5050506200299a9150620027b3565b5190565b9091923d8082853e620029b28185620023fc565b8301928281850312620002d757805190858211620002a857019280601f85011215620002d757835194851162002a8157855195620029f6848760051b0188620023fc565b858752838701928461012080980287010195838711620002d7578501935b86851062002a325750505050505050506200299a903880806200298b565b8785850312620002d757858891845162002a4c81620023e0565b8751815262002a5e87848a01620027d7565b8382015262002a718760a08a01620027d7565b8682015281520194019362002a14565b634e487b7160e01b82526041600452602482fd5b84513d6000823e3d90fd5b845188528b99509687019690930192820162002955565b855162461bcd60e51b8152600481018690526012602482015271496e73756666696369656e742066756e647360701b6044820152606490fd5b908582813d831162002b1b575b62002b098183620023fc565b81010312620004cf57505138620028ba565b503d62002afd565b86513d6000823e3d90fd5b60078054909260ff9260009260a01c84166200316357600a544210620031515760089484865460a01c16818110156200313d576003809114620030855785875460a01c1694828610156200307157600480961462002fb857875495878760a01c168481101562002f155760051462002bab57505050505050505050565b835460ff60a01b19808216600160a01b178655600c549098908a16600281101562002fa5571562002f28575b505087600c5416600281101562002f155760011462002e96575b60018060a01b0397887f00000000000000000000000000000000000000000000000000000000000000001692604096875163d47eed4560e01b81526020998a868301528a828062002c4760248201858862002715565b03818a5afa91821562002e8c57849262002e57575b50863b156200129c5791839162002c90938c8c5195869485938493631df3cbc560e31b85528c850152602484019162002715565b0391895af1801562002e4d5762002e3b575b50600d5493875194859463052571af60e51b8652850152603c602485015283604460809586935afa93841562002e2f57819462002db6575b5050928260609262002da5957fda06f234b668c93d5e36ae196cc16d06d14b6491a4ac4499042f0b351498f6689998979551601d5467ffffffffffffffff60401b8b8601518b1b16906001600160401b038b870151861b63ffffffff60801b169316906001600160601b0360a01b1617171794859384601d550151601e558c549b62002d6f8d8a5193849160a81c166200248a565b8c16898201527f54abe5cff8746fc59eefd3a10a4e9821354cd951ffef23d64fdb7939b6e2e419883392a21c900b910b620034c4565b9051908152a116600360a11b179055565b90919350823d841162002e27575b62002dd08183620023fc565b8101918382840312620004cf57509260609262002e1762002da596937fda06f234b668c93d5e36ae196cc16d06d14b6491a4ac4499042f0b351498f6689a999896620027d7565b9496979850928192955062002cda565b503d62002dc4565b508651903d90823e3d90fd5b62002e46906200239a565b3862002ca2565b88513d84823e3d90fd5b9091508a81813d831162002e84575b62002e728183620023fc565b810103126200129c5751903862002c5c565b503d62002e66565b8a513d86823e3d90fd5b62002eac6019548060801c850b90860b620034c4565b62002ebf600e54600f54860b90620034c4565b1062002ee95788546006546001600160a01b0316600161ff0160a01b031990911617895562002bf1565b88548454600161ff0160a01b03199091166001600160a01b039190911617600160a81b17895562002bf1565b634e487b7160e01b835260218252602483fd5b62002f3e6014548060801c870b90880b620034c4565b62002f51600e54600f54880b90620034c4565b1162002f8057505088546006546001600160a01b0316600161ff0160a01b03199091161789555b388062002bd7565b600161ff0160a01b0319166001600160a01b0390911617600160a81b17895562002f78565b634e487b7160e01b855260218452602485fd5b5050506060935062002fcb92506200283e565b8051601855602081015190815160195492604060208201519386828401519363ffffffff60801b956001600160401b039788966001600160601b0360a01b9a8b67ffffffffffffffff60401b998a9360801b8c16951691161791871b1617176019550151601a55015193845193601b5492602087015160401b1693604087015160801b1694169116171717601b550151601c55600560a01b60ff60a01b19825416179055565b634e487b7160e01b81526021600452602490fd5b5050606093506200309792506200283e565b8051601355602081015190815160145492604060208201519386828401519363ffffffff60801b956001600160401b039788966001600160601b0360a01b9a8b67ffffffffffffffff60401b998a9360801b8c16951691161791871b161717601455015160155501519384519360165492602087015160401b1693604087015160801b16941691161717176016550151601755600160a21b60ff60a01b19825416179055565b634e487b7160e01b85526021600452602485fd5b60405163039d21e760e11b8152600490fd5b6040516378e34bb960e01b8152600490fd5b6040919493926200318b8260608101976200248a565b60208201520152565b6200319f90620032e4565b918082106200324c5760045491620031bb60025480946200258b565b92620f424093848102948186041490151715620025c0576200323e84620032376200320c6200320564e8d4a5100099620031fe62001fbb98620032489b620026ac565b94620026ac565b836200269e565b620032308762003229816200322285886200348f565b966200269e565b926200269e565b906200348f565b906200269e565b60011c90620025ac565b0490565b60405163224e54d760e01b8152600490fd5b6200326990620032e4565b91600454916200327d60025480946200258b565b92620f424093848102948186041490151715620025c0576200323e8462003237620032c06200320564e8d4a5100099620031fe62001fbb98620032489b620026ac565b6200323087620032dd81620032d685886200348f565b96620026ac565b92620026ac565b60038110156200249857620033e3576006546040516370a0823160e01b808252306004830152602093926001600160a01b03929085908290602490829087165afa9283156200339f578591600094620033ab575b50600754169160246040518094819382523060048301525afa9384156200339f5760009462003368575b50509190565b8181959293953d831162003397575b620033838183620023fc565b81010312620004cf57505191388062003362565b503d62003377565b6040513d6000823e3d90fd5b9182819592953d8311620033db575b620033c68183620023fc565b81010312620004cf5750849051923862003338565b503d620033ba565b6007546040516370a0823160e01b808252306004830152602093926001600160a01b03929085908290602490829087165afa9283156200339f57859160009462003457575b50600654169160246040518094819382523060048301525afa9384156200339f57600094620033685750509190565b9182819592953d831162003487575b620034728183620023fc565b81010312620004cf5750849051923862003428565b503d62003466565b908015620034bb57620f424091828102928184041490151715620025c057620034b8916200258b565b90565b50506207a12090565b9060030b600719808203620034d857505090565b8082121562003514570390637fffffff198212637fffffff831317620025c0576200350d620034b89263ffffffff166200354a565b906200258b565b5060080190637fffffff198212637fffffff831317620025c05762003543620034b89263ffffffff166200354a565b90620025ac565b600190816000815b6200355e575b50505090565b90919263ffffffff8085169083161015620035a357600a90818102918183041490151715620025c0579263ffffffff809216918214620025c057919081018162003552565b926200355856fe60406080815234620003d65762000d86803803806200001e81620003db565b9283398101608082820312620003d65781516001600160401b039290838111620003d657826200005091830162000401565b906020928382015190858211620003d6576200006e91830162000401565b8186015190926001600160a01b038216929091839003620003d65760600151948151818111620002d6576003908154906001948583811c93168015620003cb575b89841014620003b5578190601f938481116200035f575b508990848311600114620002f857600092620002ec575b505060001982851b1c191690851b1782555b8551928311620002d65760049586548581811c91168015620002cb575b89821014620002b6578281116200026b575b50879184116001146200020057938394918492600095620001f4575b50501b92600019911b1c19161782555b60018060a01b03193381600554161760055560065416176006553315620001dd5760025490838201809211620001c857506000917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9160025533835282815284832084815401905584519384523393a3516109129081620004748239f35b601190634e487b7160e01b6000525260246000fd5b602490600085519163ec442f0560e01b8352820152fd5b0151935038806200013a565b9190601f198416928760005284896000209460005b8b8983831062000253575050501062000238575b50505050811b0182556200014a565b01519060f884600019921b161c191690553880808062000229565b86860151895590970196948501948893500162000215565b87600052886000208380870160051c8201928b8810620002ac575b0160051c019086905b8281106200029f5750506200011e565b600081550186906200028f565b9250819262000286565b602288634e487b7160e01b6000525260246000fd5b90607f16906200010c565b634e487b7160e01b600052604160045260246000fd5b015190503880620000dd565b90879350601f19831691866000528b6000209260005b8d8282106200034857505084116200032f575b505050811b018255620000ef565b015160001983871b60f8161c1916905538808062000321565b8385015186558b979095019493840193016200030e565b90915084600052896000208480850160051c8201928c8610620003ab575b918991869594930160051c01915b8281106200039b575050620000c6565b600081558594508991016200038b565b925081926200037d565b634e487b7160e01b600052602260045260246000fd5b92607f1692620000af565b600080fd5b6040519190601f01601f191682016001600160401b03811183821017620002d657604052565b919080601f84011215620003d65782516001600160401b038111620002d65760209062000437601f8201601f19168301620003db565b92818452828287010111620003d65760005b8181106200045f57508260009394955001015290565b85810183015184820184015282016200044956fe608060408181526004918236101561001657600080fd5b600092833560e01c91826306fdde03146106ac57508163095ea7b31461060257816318160ddd146105e357816323b872dd146104d0578163313ce567146104b457816340c10f19146103ec5781635b8bec55146103c357816370a082311461038c57816395d89b411461026d5781639dc29fac1461017d578163a9059cbb1461012757508063dd62ed3e146100df5763def114b6146100b457600080fd5b346100db57816003193601126100db5760055490516001600160a01b039091168152602090f35b5080fd5b50346100db57806003193601126100db57806020926100fc6107cd565b6101046107e8565b6001600160a01b0391821683526001865283832091168252845220549051908152f35b82843461017a578160031936011261017a57506101426107cd565b9160018060a01b0360065416331461016c575061016560209260243590336107fe565b5160018152f35b905163ec0511b360e01b8152fd5b80fd5b839150346100db57826003193601126100db576101986107cd565b6005549091602435916001600160a01b03908116330361025e578316928315610247578385528460205285852054918383106102135750508184957fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef936020938688528785520381872055816002540360025551908152a380f35b865163391434e360e21b81526001600160a01b03909216908201908152602081018390526040810184905281906060010390fd5b8551634b637e8f60e11b8152808301869052602490fd5b508451631e29ea2960e11b8152fd5b8383346100db57816003193601126100db57805190828454600181811c90808316928315610382575b602093848410811461036f5783885290811561035357506001146102fe575b505050829003601f01601f191682019267ffffffffffffffff8411838510176102eb57508291826102e7925282610784565b0390f35b634e487b7160e01b815260418552602490fd5b8787529192508591837f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b83851061033f57505050508301018580806102b5565b805488860183015293019284908201610329565b60ff1916878501525050151560051b84010190508580806102b5565b634e487b7160e01b895260228a52602489fd5b91607f1691610296565b5050346100db5760203660031901126100db5760209181906001600160a01b036103b46107cd565b16815280845220549051908152f35b5050346100db57816003193601126100db5760065490516001600160a01b039091168152602090f35b919050346104b057806003193601126104b0576104076107cd565b60055460243592916001600160a01b0391821633036104a0571692831561048b5760025490838201809211610478575084927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9260209260025585855284835280852082815401905551908152a380f35b634e487b7160e01b865260119052602485fd5b84602492519163ec442f0560e01b8352820152fd5b825163294c9fd360e01b81528590fd5b8280fd5b5050346100db57816003193601126100db576020905160068152f35b9050823461017a57606036600319011261017a576104ec6107cd565b6104f46107e8565b60065460443594919391906001600160a01b03848116911681146105d457808352600160205286832033845260205286832054916000198303610540575b6020886101658989896107fe565b8683106105a857811561059157331561057a5750825260016020908152868320338452815291869020908590039055829061016587610532565b8751634a1406b160e11b8152908101849052602490fd5b875163e602df0560e01b8152908101849052602490fd5b8751637dc7a0d960e11b8152339181019182526020820193909352604081018790528291506060010390fd5b50855163ec0511b360e01b8152fd5b5050346100db57816003193601126100db576020906002549051908152f35b9050346104b057816003193601126104b05761061c6107cd565b602435903315610695576001600160a01b031691821561067e57508083602095338152600187528181208582528752205582519081527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925843392a35160018152f35b8351634a1406b160e11b8152908101859052602490fd5b835163e602df0560e01b8152808401869052602490fd5b849084346104b057826003193601126104b05782600354600181811c9080831692831561077a575b602093848410811461036f57838852908115610353575060011461072457505050829003601f01601f191682019267ffffffffffffffff8411838510176102eb57508291826102e7925282610784565b600387529192508591837fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b5b83851061076657505050508301018580806102b5565b805488860183015293019284908201610750565b91607f16916106d4565b6020808252825181830181905290939260005b8281106107b957505060409293506000838284010152601f8019910116010190565b818101860151848201604001528501610797565b600435906001600160a01b03821682036107e357565b600080fd5b602435906001600160a01b03821682036107e357565b916001600160a01b038084169283156108c357169283156108aa5760009083825281602052604082205490838210610878575091604082827fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef958760209652828652038282205586815220818154019055604051908152a3565b60405163391434e360e21b81526001600160a01b03919091166004820152602481019190915260448101839052606490fd5b60405163ec442f0560e01b815260006004820152602490fd5b604051634b637e8f60e11b815260006004820152602490fdfea26469706673582212203672f4cd9b1754d205280219cc0fec549867232c19c11c6bdbee5f30f8290b8264736f6c63430008140033a26469706673582212209c778d28b97a9e05e3e0dadf30133da5ba249f700c9ac5f359e14b39a68eadbc64736f6c63430008140033a2646970667358221220c90ffbb09550078e6b3b26301a89918a068296ba94ee3667d9c2ee2482f07a5a64736f6c63430008140033",
  "devdoc": {
    "author": "PredictX",
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdrawProtocolFees(address)": {
        "params": {
          "token": "Address of ERC20 token to withdraw, or address(0) for ETH"
        }
      }
    },
    "title": "PredictionFactory - Deployment hub and registry for prediction markets",
    "version": 1
  },
  "userdoc": {
    "events": {
      "PredictionCreated(uint256,address,address,uint256,uint256)": {
        "notice": "Event emitted when a new prediction is created"
      }
    },
    "kind": "user",
    "methods": {
      "getPredictionOutcome(uint256)": {
        "notice": "Returns outcome of a specific prediction"
      },
      "getUserPredictions(address)": {
        "notice": "Returns list of prediction ids created by user"
      },
      "predictionCount()": {
        "notice": "Total number of created predictions (and latest id)"
      },
      "predictions(uint256)": {
        "notice": "Registry mapping from id to prediction address"
      },
      "userPredictions(address,uint256)": {
        "notice": "Tracks predictions created by a user"
      },
      "withdrawProtocolFees(address)": {
        "notice": "Withdraw accumulated protocol fees (ERC20 or ETH) to the owner"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/PredictionFactory.sol:PredictionFactory",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 944,
        "contract": "contracts/PredictionFactory.sol:PredictionFactory",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1271,
        "contract": "contracts/PredictionFactory.sol:PredictionFactory",
        "label": "predictionCount",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1276,
        "contract": "contracts/PredictionFactory.sol:PredictionFactory",
        "label": "predictions",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1282,
        "contract": "contracts/PredictionFactory.sol:PredictionFactory",
        "label": "userPredictions",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}